<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Cloud. Big Data. Analytics... and so on</title><link href="https://krinkere.github.io/krinkersite/" rel="alternate"></link><link href="https://krinkere.github.io/krinkersite/feeds/all.atom.xml" rel="self"></link><id>https://krinkere.github.io/krinkersite/</id><updated>2018-06-20T11:45:00-04:00</updated><entry><title>Data Creation for Automated Feature Engineering via Featuretools post</title><link href="https://krinkere.github.io/krinkersite/featuretools_data_generation.html" rel="alternate"></link><published>2018-06-20T11:16:00-04:00</published><updated>2018-06-20T11:45:00-04:00</updated><author><name>Al Krinker</name></author><id>tag:krinkere.github.io,2018-06-20:/krinkersite/featuretools_data_generation.html</id><summary type="html">&lt;p&gt;How to generate data for Automated Feature Engineering via Featuretools post&lt;/p&gt;</summary><content type="html">&lt;p&gt;How to generate sample data for &lt;a href="Automated_Feature_Engineering_via_Featuretools.md"&gt;Automated Feature Engineering via Featuretools post&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h1 id="Introduction:-Data-Creation"&gt;Introduction: Data Creation&lt;a class="anchor-link" href="#Introduction:-Data-Creation"&gt;&amp;#182;&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;In this notebook we create an example dataset to be used for automated feature engineering. I have included this code in the repository for posterity and because at some point it may come in use for generating additional example datasets.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In&amp;nbsp;[1]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;

&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;datetime&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;random&lt;/span&gt;

&lt;span class="n"&gt;rand_dates&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
 
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  
  &lt;span class="n"&gt;year&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="n"&gt;month&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="n"&gt;day&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;29&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
  &lt;span class="n"&gt;rdate&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;day&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;rand_dates&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rdate&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In&amp;nbsp;[2]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;clients&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;client_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;joined&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;income&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;credit_score&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;25&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
  &lt;span class="n"&gt;clients&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;clients&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;client_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;25000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;joined&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rand_dates&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                           &lt;span class="s1"&gt;&amp;#39;income&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;30500&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;240000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;credit_score&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;850&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]},&lt;/span&gt;
                                        &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="n"&gt;ignore_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;clients&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

&lt;div class="prompt output_prompt"&gt;Out[2]:&lt;/div&gt;



&lt;div class="output_html rendered_html output_subarea output_execute_result"&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;client_id&lt;/th&gt;
      &lt;th&gt;joined&lt;/th&gt;
      &lt;th&gt;income&lt;/th&gt;
      &lt;th&gt;credit_score&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;46109&lt;/td&gt;
      &lt;td&gt;2002-04-16&lt;/td&gt;
      &lt;td&gt;172677&lt;/td&gt;
      &lt;td&gt;527&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;49545&lt;/td&gt;
      &lt;td&gt;2007-11-14&lt;/td&gt;
      &lt;td&gt;104564&lt;/td&gt;
      &lt;td&gt;770&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;41480&lt;/td&gt;
      &lt;td&gt;2013-03-11&lt;/td&gt;
      &lt;td&gt;122607&lt;/td&gt;
      &lt;td&gt;585&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;46180&lt;/td&gt;
      &lt;td&gt;2001-11-06&lt;/td&gt;
      &lt;td&gt;43851&lt;/td&gt;
      &lt;td&gt;562&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;25707&lt;/td&gt;
      &lt;td&gt;2006-10-06&lt;/td&gt;
      &lt;td&gt;211422&lt;/td&gt;
      &lt;td&gt;621&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In&amp;nbsp;[3]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;loans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;client_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;loan_type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;loan_amount&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;repaid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                         &lt;span class="s1"&gt;&amp;#39;loan_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;loan_start&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;loan_end&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;clients&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;client_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unique&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;time_created&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2015&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                               &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;13&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                               &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="n"&gt;time_ended&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time_created&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

    &lt;span class="n"&gt;loans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;loans&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;client_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;loan_type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;cash&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;credit&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;home&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;other&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt;
                                                         &lt;span class="s1"&gt;&amp;#39;loan_amount&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;500&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;15000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                                                         &lt;span class="s1"&gt;&amp;#39;repaid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; 
                                                         &lt;span class="s1"&gt;&amp;#39;loan_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                                                         &lt;span class="s1"&gt;&amp;#39;loan_start&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;time_created&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                                         &lt;span class="s1"&gt;&amp;#39;loan_end&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;time_ended&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                                          &lt;span class="s1"&gt;&amp;#39;rate&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;round&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)},&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="n"&gt;ignore_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In&amp;nbsp;[4]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;loans&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

&lt;div class="prompt output_prompt"&gt;Out[4]:&lt;/div&gt;



&lt;div class="output_html rendered_html output_subarea output_execute_result"&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;client_id&lt;/th&gt;
      &lt;th&gt;loan_type&lt;/th&gt;
      &lt;th&gt;loan_amount&lt;/th&gt;
      &lt;th&gt;repaid&lt;/th&gt;
      &lt;th&gt;loan_id&lt;/th&gt;
      &lt;th&gt;loan_start&lt;/th&gt;
      &lt;th&gt;loan_end&lt;/th&gt;
      &lt;th&gt;rate&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;46109&lt;/td&gt;
      &lt;td&gt;home&lt;/td&gt;
      &lt;td&gt;13672&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;10243&lt;/td&gt;
      &lt;td&gt;2002-04-16&lt;/td&gt;
      &lt;td&gt;2003-12-20&lt;/td&gt;
      &lt;td&gt;2.15&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;46109&lt;/td&gt;
      &lt;td&gt;credit&lt;/td&gt;
      &lt;td&gt;9794&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;10984&lt;/td&gt;
      &lt;td&gt;2003-10-21&lt;/td&gt;
      &lt;td&gt;2005-07-17&lt;/td&gt;
      &lt;td&gt;1.25&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;46109&lt;/td&gt;
      &lt;td&gt;home&lt;/td&gt;
      &lt;td&gt;12734&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;10990&lt;/td&gt;
      &lt;td&gt;2006-02-01&lt;/td&gt;
      &lt;td&gt;2007-07-05&lt;/td&gt;
      &lt;td&gt;0.68&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;46109&lt;/td&gt;
      &lt;td&gt;cash&lt;/td&gt;
      &lt;td&gt;12518&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;10596&lt;/td&gt;
      &lt;td&gt;2010-12-08&lt;/td&gt;
      &lt;td&gt;2013-05-05&lt;/td&gt;
      &lt;td&gt;1.24&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;46109&lt;/td&gt;
      &lt;td&gt;credit&lt;/td&gt;
      &lt;td&gt;14049&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;11415&lt;/td&gt;
      &lt;td&gt;2010-07-07&lt;/td&gt;
      &lt;td&gt;2012-05-21&lt;/td&gt;
      &lt;td&gt;3.13&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In&amp;nbsp;[5]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;payments&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;loan_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;payment_amount&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                                    &lt;span class="s1"&gt;&amp;#39;payment_date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;missed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;loans&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iterrows&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
  &lt;span class="n"&gt;time_created&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;loan_start&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;payment_date&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;time_created&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;loan_amount&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;loan_amount&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;loan_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;loan_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="n"&gt;payment_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;12000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]):&lt;/span&gt;
    &lt;span class="n"&gt;payment_id&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;payment_date&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Timedelta&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;days&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;payments&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;payments&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;loan_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;loan_id&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                                                               &lt;span class="s1"&gt;&amp;#39;payment_amount&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;randint&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loan_amount&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;loan_amount&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                                                               &lt;span class="s1"&gt;&amp;#39;payment_date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;payment_date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;missed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;random&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])},&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]),&lt;/span&gt; &lt;span class="n"&gt;ignore_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In&amp;nbsp;[6]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;payments&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

&lt;div class="prompt output_prompt"&gt;Out[6]:&lt;/div&gt;



&lt;div class="output_html rendered_html output_subarea output_execute_result"&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;loan_id&lt;/th&gt;
      &lt;th&gt;payment_amount&lt;/th&gt;
      &lt;th&gt;payment_date&lt;/th&gt;
      &lt;th&gt;missed&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;10243&lt;/td&gt;
      &lt;td&gt;2369&lt;/td&gt;
      &lt;td&gt;2002-05-31&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;10243&lt;/td&gt;
      &lt;td&gt;2439&lt;/td&gt;
      &lt;td&gt;2002-06-18&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;10243&lt;/td&gt;
      &lt;td&gt;2662&lt;/td&gt;
      &lt;td&gt;2002-06-29&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;10243&lt;/td&gt;
      &lt;td&gt;2268&lt;/td&gt;
      &lt;td&gt;2002-07-20&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;10243&lt;/td&gt;
      &lt;td&gt;2027&lt;/td&gt;
      &lt;td&gt;2002-07-31&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In&amp;nbsp;[7]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;clients&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;clients&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drop_duplicates&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;client_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;loans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;loans&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drop_duplicates&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;subset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;loan_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="n"&gt;clients&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;clients.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;loans&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;loans.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;payments&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;to_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;payments.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
 

&lt;/p&gt;</content><category term="python"></category><category term="featuretools"></category><category term="feature engineering"></category><category term="data science"></category></entry><entry><title>Automated Feature Engineering via Featuretools</title><link href="https://krinkere.github.io/krinkersite/featuretools.html" rel="alternate"></link><published>2018-06-20T10:26:00-04:00</published><updated>2018-06-20T11:32:00-04:00</updated><author><name>Al Krinker</name></author><id>tag:krinkere.github.io,2018-06-20:/krinkersite/featuretools.html</id><summary type="html">&lt;p&gt;How to automatically create machine learning features via Featuretools&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Take aways&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Feature engineering, also known as feature creation, is the process of constructing new features from existing data to train a machine learning model.&lt;/li&gt;
&lt;li&gt;Feature engineering means building additional features out of existing data which is often spread across multiple related tables. Feature engineering requires extracting the relevant information from the data and getting it into a single table which can then be used to train a machine learning model.&lt;/li&gt;
&lt;li&gt;We can group the operations of feature creation into two categories: transformations and aggregations. A transformation acts on a single table by creating new features out of one or more of the existing columns. An aggregations are performed across tables, and use a one-to-many relationship to group observations and then calculate statistics.&lt;/li&gt;
&lt;li&gt;Aggregation operations are not difficult by themselves, but if we have hundreds of variables spread across dozens of tables, this process is not feasible to do by hand.&lt;/li&gt;
&lt;li&gt;Fortunately, featuretools is exactly the solution we are looking for. This open-source Python library will automatically create many features from a set of related tables.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h1 id="Introduction:-Automated-Feature-Engineering"&gt;Introduction: Automated Feature Engineering&lt;a class="anchor-link" href="#Introduction:-Automated-Feature-Engineering"&gt;&amp;#182;&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;In this notebook, we will look at an exciting development in data science: automated feature engineering. A machine learning model can only learn from the data we give it, and making sure that data is relevant to the task is one of the most crucial steps in the machine learning pipeline (this is made clear in the excellent paper &lt;a href="https://homes.cs.washington.edu/~pedrod/papers/cacm12.pdf"&gt;"A Few Useful Things to Know about Machine Learning"&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;However, manual feature engineering is a tedious task and is limited by both human imagination - there are only so many features we can think to create - and by time - creating new features is time-intensive. Ideally, there would be an objective method to create an array of diverse new candidate features that we can then use for a machine learning task. This process is meant to not replace the data scientist, but to make her job easier and allowing her to supplement domain knowledge with an automated workflow.&lt;/p&gt;
&lt;p&gt;In this notebook, we will walk through an implementation of using &lt;a href="https://www.featuretools.com/"&gt;Featuretools&lt;/a&gt;, an open-source Python library for automatically creating features with relational data (where the data is in structured tables). Although there are now many efforts working to enable automated model selection and hyperparameter tuning, there has been a lack of automating work on the feature engineering aspect of the pipeline. This library seeks to close that gap and the general methodology has been proven effective in both &lt;a href="https://github.com/HDI-Project/Data-Science-Machine"&gt;machine learning competitions with the data science machine&lt;/a&gt; and &lt;a href="https://www.featurelabs.com/blog/predicting-credit-card-fraud/"&gt;business use cases&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id="Dataset"&gt;Dataset&lt;a class="anchor-link" href="#Dataset"&gt;&amp;#182;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;To show the basic idea of featuretools we will use an example dataset consisting of three tables:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;clients&lt;/code&gt;: information about clients at a credit union&lt;/li&gt;
&lt;li&gt;&lt;code&gt;loans&lt;/code&gt;: previous loans taken out by the clients&lt;/li&gt;
&lt;li&gt;&lt;code&gt;payments&lt;/code&gt;: payments made/missed on the previous loans&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The general problem of feature engineering is taking disparate data, often distributed across multiple tables, and combining it into a single table that can be used for training a machine learning model. Featuretools has the ability to do this for us, creating many new candidate features with minimal effort. These features are combined into a single table that can then be passed on to our model.&lt;/p&gt;
&lt;p&gt;First, let's load in the data and look at the problem we are working with.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In&amp;nbsp;[1]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Run this if featuretools is not already installed&lt;/span&gt;
&lt;span class="c1"&gt;# !pip install -U featuretools&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In&amp;nbsp;[2]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# pandas and numpy for data manipulation&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;numpy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;np&lt;/span&gt;

&lt;span class="c1"&gt;# featuretools for automated feature engineering&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;featuretools&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;ft&lt;/span&gt;

&lt;span class="c1"&gt;# ignore warnings from pandas&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;warnings&lt;/span&gt;
&lt;span class="n"&gt;warnings&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;filterwarnings&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;ignore&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In&amp;nbsp;[3]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Read in the data&lt;/span&gt;
&lt;span class="n"&gt;clients&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;data/clients.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parse_dates&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;joined&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;loans&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;data/loans.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parse_dates&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;loan_start&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;loan_end&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;payments&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;data/payments.csv&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;parse_dates&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;payment_date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In&amp;nbsp;[4]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;clients&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

&lt;div class="prompt output_prompt"&gt;Out[4]:&lt;/div&gt;



&lt;div class="output_html rendered_html output_subarea output_execute_result"&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;client_id&lt;/th&gt;
      &lt;th&gt;joined&lt;/th&gt;
      &lt;th&gt;income&lt;/th&gt;
      &lt;th&gt;credit_score&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;46109&lt;/td&gt;
      &lt;td&gt;2002-04-16&lt;/td&gt;
      &lt;td&gt;172677&lt;/td&gt;
      &lt;td&gt;527&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;49545&lt;/td&gt;
      &lt;td&gt;2007-11-14&lt;/td&gt;
      &lt;td&gt;104564&lt;/td&gt;
      &lt;td&gt;770&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;41480&lt;/td&gt;
      &lt;td&gt;2013-03-11&lt;/td&gt;
      &lt;td&gt;122607&lt;/td&gt;
      &lt;td&gt;585&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;46180&lt;/td&gt;
      &lt;td&gt;2001-11-06&lt;/td&gt;
      &lt;td&gt;43851&lt;/td&gt;
      &lt;td&gt;562&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;25707&lt;/td&gt;
      &lt;td&gt;2006-10-06&lt;/td&gt;
      &lt;td&gt;211422&lt;/td&gt;
      &lt;td&gt;621&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In&amp;nbsp;[5]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;loans&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

&lt;div class="prompt output_prompt"&gt;Out[5]:&lt;/div&gt;



&lt;div class="output_html rendered_html output_subarea output_execute_result"&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;client_id&lt;/th&gt;
      &lt;th&gt;loan_type&lt;/th&gt;
      &lt;th&gt;loan_amount&lt;/th&gt;
      &lt;th&gt;repaid&lt;/th&gt;
      &lt;th&gt;loan_id&lt;/th&gt;
      &lt;th&gt;loan_start&lt;/th&gt;
      &lt;th&gt;loan_end&lt;/th&gt;
      &lt;th&gt;rate&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;254&lt;/th&gt;
      &lt;td&gt;29841&lt;/td&gt;
      &lt;td&gt;cash&lt;/td&gt;
      &lt;td&gt;4718&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;11175&lt;/td&gt;
      &lt;td&gt;2014-03-08&lt;/td&gt;
      &lt;td&gt;2015-09-13&lt;/td&gt;
      &lt;td&gt;2.74&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;196&lt;/th&gt;
      &lt;td&gt;26326&lt;/td&gt;
      &lt;td&gt;other&lt;/td&gt;
      &lt;td&gt;10902&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;11559&lt;/td&gt;
      &lt;td&gt;2014-09-06&lt;/td&gt;
      &lt;td&gt;2016-11-14&lt;/td&gt;
      &lt;td&gt;6.73&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;45&lt;/th&gt;
      &lt;td&gt;41480&lt;/td&gt;
      &lt;td&gt;cash&lt;/td&gt;
      &lt;td&gt;12581&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;11461&lt;/td&gt;
      &lt;td&gt;2009-10-29&lt;/td&gt;
      &lt;td&gt;2011-07-08&lt;/td&gt;
      &lt;td&gt;1.94&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;415&lt;/th&gt;
      &lt;td&gt;49624&lt;/td&gt;
      &lt;td&gt;cash&lt;/td&gt;
      &lt;td&gt;8621&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;10454&lt;/td&gt;
      &lt;td&gt;2014-07-26&lt;/td&gt;
      &lt;td&gt;2015-12-29&lt;/td&gt;
      &lt;td&gt;3.18&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;26&lt;/th&gt;
      &lt;td&gt;49545&lt;/td&gt;
      &lt;td&gt;other&lt;/td&gt;
      &lt;td&gt;4131&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;10939&lt;/td&gt;
      &lt;td&gt;2008-10-13&lt;/td&gt;
      &lt;td&gt;2010-02-26&lt;/td&gt;
      &lt;td&gt;4.07&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;417&lt;/th&gt;
      &lt;td&gt;49624&lt;/td&gt;
      &lt;td&gt;credit&lt;/td&gt;
      &lt;td&gt;11219&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;11132&lt;/td&gt;
      &lt;td&gt;2013-08-12&lt;/td&gt;
      &lt;td&gt;2016-03-15&lt;/td&gt;
      &lt;td&gt;3.77&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;137&lt;/th&gt;
      &lt;td&gt;32726&lt;/td&gt;
      &lt;td&gt;credit&lt;/td&gt;
      &lt;td&gt;7499&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;10285&lt;/td&gt;
      &lt;td&gt;2012-10-07&lt;/td&gt;
      &lt;td&gt;2015-03-12&lt;/td&gt;
      &lt;td&gt;2.72&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;200&lt;/th&gt;
      &lt;td&gt;26326&lt;/td&gt;
      &lt;td&gt;credit&lt;/td&gt;
      &lt;td&gt;5275&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;11072&lt;/td&gt;
      &lt;td&gt;2014-11-11&lt;/td&gt;
      &lt;td&gt;2016-07-17&lt;/td&gt;
      &lt;td&gt;1.45&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;180&lt;/th&gt;
      &lt;td&gt;48177&lt;/td&gt;
      &lt;td&gt;cash&lt;/td&gt;
      &lt;td&gt;6521&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;11235&lt;/td&gt;
      &lt;td&gt;2014-07-12&lt;/td&gt;
      &lt;td&gt;2016-02-22&lt;/td&gt;
      &lt;td&gt;6.17&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;8&lt;/th&gt;
      &lt;td&gt;46109&lt;/td&gt;
      &lt;td&gt;home&lt;/td&gt;
      &lt;td&gt;11062&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;11611&lt;/td&gt;
      &lt;td&gt;2012-09-12&lt;/td&gt;
      &lt;td&gt;2014-03-14&lt;/td&gt;
      &lt;td&gt;5.48&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In&amp;nbsp;[6]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;payments&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

&lt;div class="prompt output_prompt"&gt;Out[6]:&lt;/div&gt;



&lt;div class="output_html rendered_html output_subarea output_execute_result"&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;loan_id&lt;/th&gt;
      &lt;th&gt;payment_amount&lt;/th&gt;
      &lt;th&gt;payment_date&lt;/th&gt;
      &lt;th&gt;missed&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;965&lt;/th&gt;
      &lt;td&gt;11221&lt;/td&gt;
      &lt;td&gt;1511&lt;/td&gt;
      &lt;td&gt;2009-07-14&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1285&lt;/th&gt;
      &lt;td&gt;11264&lt;/td&gt;
      &lt;td&gt;218&lt;/td&gt;
      &lt;td&gt;2009-11-06&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1664&lt;/th&gt;
      &lt;td&gt;10769&lt;/td&gt;
      &lt;td&gt;210&lt;/td&gt;
      &lt;td&gt;2012-03-18&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1074&lt;/th&gt;
      &lt;td&gt;10106&lt;/td&gt;
      &lt;td&gt;1003&lt;/td&gt;
      &lt;td&gt;2003-09-09&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2521&lt;/th&gt;
      &lt;td&gt;10868&lt;/td&gt;
      &lt;td&gt;349&lt;/td&gt;
      &lt;td&gt;2013-10-04&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2909&lt;/th&gt;
      &lt;td&gt;10537&lt;/td&gt;
      &lt;td&gt;1292&lt;/td&gt;
      &lt;td&gt;2005-11-23&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;44&lt;/th&gt;
      &lt;td&gt;11141&lt;/td&gt;
      &lt;td&gt;1220&lt;/td&gt;
      &lt;td&gt;2007-09-20&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2445&lt;/th&gt;
      &lt;td&gt;10109&lt;/td&gt;
      &lt;td&gt;806&lt;/td&gt;
      &lt;td&gt;2014-07-23&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1581&lt;/th&gt;
      &lt;td&gt;10624&lt;/td&gt;
      &lt;td&gt;1176&lt;/td&gt;
      &lt;td&gt;2001-03-20&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1344&lt;/th&gt;
      &lt;td&gt;10262&lt;/td&gt;
      &lt;td&gt;770&lt;/td&gt;
      &lt;td&gt;2007-03-02&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h3 id="Manual-Feature-Engineering-Examples"&gt;Manual Feature Engineering Examples&lt;a class="anchor-link" href="#Manual-Feature-Engineering-Examples"&gt;&amp;#182;&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Let's show a few examples of features we might make by hand. We will keep this relatively simple to avoid doing too much work! First we will focus on a single dataframe before combining them together. In the &lt;code&gt;clients&lt;/code&gt; dataframe, we can take the month of the &lt;code&gt;joined&lt;/code&gt; column and the natural log of the &lt;code&gt;income&lt;/code&gt; column. Later, we see these are known in featuretools as transformation feature primitives because they act on column in a single table.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In&amp;nbsp;[7]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Create a month column&lt;/span&gt;
&lt;span class="n"&gt;clients&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;join_month&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;clients&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;joined&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;month&lt;/span&gt;

&lt;span class="c1"&gt;# Create a log of income column&lt;/span&gt;
&lt;span class="n"&gt;clients&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;log_income&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;np&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;log&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;clients&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;income&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="n"&gt;clients&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

&lt;div class="prompt output_prompt"&gt;Out[7]:&lt;/div&gt;



&lt;div class="output_html rendered_html output_subarea output_execute_result"&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;client_id&lt;/th&gt;
      &lt;th&gt;joined&lt;/th&gt;
      &lt;th&gt;income&lt;/th&gt;
      &lt;th&gt;credit_score&lt;/th&gt;
      &lt;th&gt;join_month&lt;/th&gt;
      &lt;th&gt;log_income&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;46109&lt;/td&gt;
      &lt;td&gt;2002-04-16&lt;/td&gt;
      &lt;td&gt;172677&lt;/td&gt;
      &lt;td&gt;527&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;12.059178&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;49545&lt;/td&gt;
      &lt;td&gt;2007-11-14&lt;/td&gt;
      &lt;td&gt;104564&lt;/td&gt;
      &lt;td&gt;770&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;11.557555&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;41480&lt;/td&gt;
      &lt;td&gt;2013-03-11&lt;/td&gt;
      &lt;td&gt;122607&lt;/td&gt;
      &lt;td&gt;585&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;11.716739&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;46180&lt;/td&gt;
      &lt;td&gt;2001-11-06&lt;/td&gt;
      &lt;td&gt;43851&lt;/td&gt;
      &lt;td&gt;562&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;10.688553&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;25707&lt;/td&gt;
      &lt;td&gt;2006-10-06&lt;/td&gt;
      &lt;td&gt;211422&lt;/td&gt;
      &lt;td&gt;621&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;12.261611&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;To incorporate information about the other tables, we use the &lt;code&gt;df.groupby&lt;/code&gt; method, followed by a suitable aggregation function, followed by &lt;code&gt;df.merge&lt;/code&gt;.  For example, let's calculate the average, minimum, and maximum amount of previous loans for each client. In the terms of featuretools, this would be considered an aggregation feature primitive because we using multiple tables in a one-to-many relationship to calculate aggregation figures (don't worry, this will be explained shortly!).&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In&amp;nbsp;[8]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Groupby client id and calculate mean, max, min previous loan size&lt;/span&gt;
&lt;span class="n"&gt;stats&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;loans&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;groupby&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;client_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;loan_amount&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;agg&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mean&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;max&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;min&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;stats&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mean_loan_amount&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;max_loan_amount&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;min_loan_amount&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;stats&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

&lt;div class="prompt output_prompt"&gt;Out[8]:&lt;/div&gt;



&lt;div class="output_html rendered_html output_subarea output_execute_result"&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;mean_loan_amount&lt;/th&gt;
      &lt;th&gt;max_loan_amount&lt;/th&gt;
      &lt;th&gt;min_loan_amount&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;client_id&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;25707&lt;/th&gt;
      &lt;td&gt;7963.950000&lt;/td&gt;
      &lt;td&gt;13913&lt;/td&gt;
      &lt;td&gt;1212&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;26326&lt;/th&gt;
      &lt;td&gt;7270.062500&lt;/td&gt;
      &lt;td&gt;13464&lt;/td&gt;
      &lt;td&gt;1164&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;26695&lt;/th&gt;
      &lt;td&gt;7824.722222&lt;/td&gt;
      &lt;td&gt;14865&lt;/td&gt;
      &lt;td&gt;2389&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;26945&lt;/th&gt;
      &lt;td&gt;7125.933333&lt;/td&gt;
      &lt;td&gt;14593&lt;/td&gt;
      &lt;td&gt;653&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;29841&lt;/th&gt;
      &lt;td&gt;9813.000000&lt;/td&gt;
      &lt;td&gt;14837&lt;/td&gt;
      &lt;td&gt;2778&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In&amp;nbsp;[9]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Merge with the clients dataframe&lt;/span&gt;
&lt;span class="n"&gt;clients&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stats&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;left_on&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;client_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;right_index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;how&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;left&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

&lt;div class="prompt output_prompt"&gt;Out[9]:&lt;/div&gt;



&lt;div class="output_html rendered_html output_subarea output_execute_result"&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;client_id&lt;/th&gt;
      &lt;th&gt;joined&lt;/th&gt;
      &lt;th&gt;income&lt;/th&gt;
      &lt;th&gt;credit_score&lt;/th&gt;
      &lt;th&gt;join_month&lt;/th&gt;
      &lt;th&gt;log_income&lt;/th&gt;
      &lt;th&gt;mean_loan_amount&lt;/th&gt;
      &lt;th&gt;max_loan_amount&lt;/th&gt;
      &lt;th&gt;min_loan_amount&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;46109&lt;/td&gt;
      &lt;td&gt;2002-04-16&lt;/td&gt;
      &lt;td&gt;172677&lt;/td&gt;
      &lt;td&gt;527&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;12.059178&lt;/td&gt;
      &lt;td&gt;8951.600000&lt;/td&gt;
      &lt;td&gt;14049&lt;/td&gt;
      &lt;td&gt;559&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;49545&lt;/td&gt;
      &lt;td&gt;2007-11-14&lt;/td&gt;
      &lt;td&gt;104564&lt;/td&gt;
      &lt;td&gt;770&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;11.557555&lt;/td&gt;
      &lt;td&gt;10289.300000&lt;/td&gt;
      &lt;td&gt;14971&lt;/td&gt;
      &lt;td&gt;3851&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;41480&lt;/td&gt;
      &lt;td&gt;2013-03-11&lt;/td&gt;
      &lt;td&gt;122607&lt;/td&gt;
      &lt;td&gt;585&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;11.716739&lt;/td&gt;
      &lt;td&gt;7894.850000&lt;/td&gt;
      &lt;td&gt;14399&lt;/td&gt;
      &lt;td&gt;811&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;46180&lt;/td&gt;
      &lt;td&gt;2001-11-06&lt;/td&gt;
      &lt;td&gt;43851&lt;/td&gt;
      &lt;td&gt;562&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;10.688553&lt;/td&gt;
      &lt;td&gt;7700.850000&lt;/td&gt;
      &lt;td&gt;14081&lt;/td&gt;
      &lt;td&gt;1607&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;25707&lt;/td&gt;
      &lt;td&gt;2006-10-06&lt;/td&gt;
      &lt;td&gt;211422&lt;/td&gt;
      &lt;td&gt;621&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;12.261611&lt;/td&gt;
      &lt;td&gt;7963.950000&lt;/td&gt;
      &lt;td&gt;13913&lt;/td&gt;
      &lt;td&gt;1212&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;39505&lt;/td&gt;
      &lt;td&gt;2011-10-14&lt;/td&gt;
      &lt;td&gt;153873&lt;/td&gt;
      &lt;td&gt;610&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;11.943883&lt;/td&gt;
      &lt;td&gt;7424.050000&lt;/td&gt;
      &lt;td&gt;14575&lt;/td&gt;
      &lt;td&gt;904&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;6&lt;/th&gt;
      &lt;td&gt;32726&lt;/td&gt;
      &lt;td&gt;2006-05-01&lt;/td&gt;
      &lt;td&gt;235705&lt;/td&gt;
      &lt;td&gt;730&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;12.370336&lt;/td&gt;
      &lt;td&gt;6633.263158&lt;/td&gt;
      &lt;td&gt;14802&lt;/td&gt;
      &lt;td&gt;851&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;7&lt;/th&gt;
      &lt;td&gt;35089&lt;/td&gt;
      &lt;td&gt;2010-03-01&lt;/td&gt;
      &lt;td&gt;131176&lt;/td&gt;
      &lt;td&gt;771&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;11.784295&lt;/td&gt;
      &lt;td&gt;6939.200000&lt;/td&gt;
      &lt;td&gt;13194&lt;/td&gt;
      &lt;td&gt;773&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;8&lt;/th&gt;
      &lt;td&gt;35214&lt;/td&gt;
      &lt;td&gt;2003-08-08&lt;/td&gt;
      &lt;td&gt;95849&lt;/td&gt;
      &lt;td&gt;696&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;11.470529&lt;/td&gt;
      &lt;td&gt;7173.555556&lt;/td&gt;
      &lt;td&gt;14767&lt;/td&gt;
      &lt;td&gt;667&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;9&lt;/th&gt;
      &lt;td&gt;48177&lt;/td&gt;
      &lt;td&gt;2008-06-09&lt;/td&gt;
      &lt;td&gt;190632&lt;/td&gt;
      &lt;td&gt;769&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;12.158100&lt;/td&gt;
      &lt;td&gt;7424.368421&lt;/td&gt;
      &lt;td&gt;14740&lt;/td&gt;
      &lt;td&gt;659&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;We could go further and include information about &lt;code&gt;payments&lt;/code&gt; in the &lt;code&gt;clients&lt;/code&gt; dataframe. To do so, we would have to group &lt;code&gt;payments&lt;/code&gt; by the &lt;code&gt;loan_id&lt;/code&gt;, merge it with the &lt;code&gt;loans&lt;/code&gt;, group the resulting dataframe by the &lt;code&gt;client_id&lt;/code&gt;, and then merge it into the &lt;code&gt;clients&lt;/code&gt; dataframe. This would allow us to include information about previous payments for each client.&lt;/p&gt;
&lt;p&gt;Clearly, this process of manual feature engineering can grow quite tedious with many columns and multiple tables and I certainly don't want to have to do this process by hand! Luckily, featuretools can automatically perform this entire process and will create more features than we would have ever thought of. Although I love &lt;code&gt;pandas&lt;/code&gt;, there is only so much manual data manipulation I'm willing to stand!&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h1 id="Featuretools"&gt;Featuretools&lt;a class="anchor-link" href="#Featuretools"&gt;&amp;#182;&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;Now that we know what we are trying to avoid (tedious manual feature engineering), let's figure out how to automate this process. Featuretools operates on an idea known as &lt;a href="https://docs.featuretools.com/api_reference.html#deep-feature-synthesis"&gt;Deep Feature Synthesis&lt;/a&gt;. You can read the &lt;a href="http://www.jmaxkanter.com/static/papers/DSAA_DSM_2015.pdf"&gt;original paper here&lt;/a&gt;, and although it's quite readable, it's not necessary to understand the details to do automated feature engineering. The concept of Deep Feature Synthesis is to use basic building blocks known as feature primitives (like the transformations and aggregations done above) that can be stacked on top of each other to form new features. The depth of a "deep feature" is equal to the number of stacked primitives.&lt;/p&gt;
&lt;p&gt;I threw out some terms there, but don't worry because we'll cover them as we go. Featuretools builds on simple ideas to create a powerful method, and we will build up our understanding in much the same way.&lt;/p&gt;
&lt;p&gt;The first part of Featuretools to understand &lt;a href="https://docs.featuretools.com/loading_data/using_entitysets.html#adding-entities"&gt;is an &lt;code&gt;entity&lt;/code&gt;&lt;/a&gt;. This is simply a table, or in &lt;code&gt;pandas&lt;/code&gt;, a &lt;code&gt;DataFrame&lt;/code&gt;. We corral multiple entities into a &lt;a href="https://docs.featuretools.com/loading_data/using_entitysets.html"&gt;single object called an &lt;code&gt;EntitySet&lt;/code&gt;&lt;/a&gt;. This is just a large data structure composed of many individual entities and the relationships between them.&lt;/p&gt;
&lt;h2 id="EntitySet"&gt;EntitySet&lt;a class="anchor-link" href="#EntitySet"&gt;&amp;#182;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Creating a new &lt;code&gt;EntitySet&lt;/code&gt; is pretty simple:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In&amp;nbsp;[10]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;es&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ft&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;EntitySet&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;clients&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="Entities"&gt;Entities&lt;a class="anchor-link" href="#Entities"&gt;&amp;#182;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;An entity is simply a table, which is represented in Pandas as a &lt;code&gt;dataframe&lt;/code&gt;. Each entity must have a uniquely identifying column, known as an index. For the clients dataframe, this is the &lt;code&gt;client_id&lt;/code&gt; because each id only appears once in the &lt;code&gt;clients&lt;/code&gt; data. In the &lt;code&gt;loans&lt;/code&gt; dataframe, &lt;code&gt;client_id&lt;/code&gt; is not an index because each id might appear more than once. The index for this dataframe is instead &lt;code&gt;loan_id&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;When we create an &lt;code&gt;entity&lt;/code&gt; in featuretools, we have to identify which column of the dataframe is the index. If the data does not have a unique index we can tell featuretools to make an index for the entity by passing in &lt;code&gt;make_index = True&lt;/code&gt; and specifying a name for the index. If the data also has a uniquely identifying time index, we can pass that in as the &lt;code&gt;time_index&lt;/code&gt; parameter.&lt;/p&gt;
&lt;p&gt;Featuretools will automatically infer the variable types (numeric, categorical, datetime) of the columns in our data, but we can also pass in specific datatypes to override this behavior. As an example, even though the &lt;code&gt;repaid&lt;/code&gt; column in the &lt;code&gt;loans&lt;/code&gt; dataframe is represented as an integer, we can tell featuretools that this is a categorical feature since it can only take on two discrete values. This is done using an integer with the variables as keys and the feature types as values.&lt;/p&gt;
&lt;p&gt;In the code below we create the three entities and add them to the &lt;code&gt;EntitySet&lt;/code&gt;.  The syntax is relatively straightforward with a few notes: for the &lt;code&gt;payments&lt;/code&gt; dataframe we need to make an index, for the &lt;code&gt;loans&lt;/code&gt; dataframe, we specify that &lt;code&gt;repaid&lt;/code&gt; is a categorical variable, and for the &lt;code&gt;payments&lt;/code&gt; dataframe, we specify that &lt;code&gt;missed&lt;/code&gt; is a categorical feature.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In&amp;nbsp;[11]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Create an entity from the client dataframe&lt;/span&gt;
&lt;span class="c1"&gt;# This dataframe already has an index and a time index&lt;/span&gt;
&lt;span class="n"&gt;es&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;es&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;entity_from_dataframe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entity_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;clients&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dataframe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;clients&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                              &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;client_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;time_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;joined&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In&amp;nbsp;[12]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Create an entity from the loans dataframe&lt;/span&gt;
&lt;span class="c1"&gt;# This dataframe already has an index and a time index&lt;/span&gt;
&lt;span class="n"&gt;es&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;es&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;entity_from_dataframe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entity_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;loans&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dataframe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;loans&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                              &lt;span class="n"&gt;variable_types&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;repaid&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ft&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;variable_types&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Categorical&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
                              &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;loan_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                              &lt;span class="n"&gt;time_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;loan_start&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In&amp;nbsp;[13]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Create an entity from the payments dataframe&lt;/span&gt;
&lt;span class="c1"&gt;# This does not yet have a unique index&lt;/span&gt;
&lt;span class="n"&gt;es&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;es&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;entity_from_dataframe&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entity_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;payments&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                              &lt;span class="n"&gt;dataframe&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;payments&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                              &lt;span class="n"&gt;variable_types&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;missed&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;ft&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;variable_types&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Categorical&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
                              &lt;span class="n"&gt;make_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                              &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;payment_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                              &lt;span class="n"&gt;time_index&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;payment_date&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In&amp;nbsp;[14]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;es&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

&lt;div class="prompt output_prompt"&gt;Out[14]:&lt;/div&gt;




&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;Entityset: clients
  Entities:
    clients [Rows: 25, Columns: 6]
    loans [Rows: 443, Columns: 8]
    payments [Rows: 3456, Columns: 5]
  Relationships:
    No relationships&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;All three entities have been successfully added to the &lt;code&gt;EntitySet&lt;/code&gt;. We can access any of the entities using Python dictionary syntax.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In&amp;nbsp;[15]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;es&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;loans&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

&lt;div class="prompt output_prompt"&gt;Out[15]:&lt;/div&gt;




&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;Entity: loans
  Variables:
    client_id (dtype: numeric)
    loan_type (dtype: categorical)
    loan_amount (dtype: numeric)
    loan_start (dtype: datetime_time_index)
    loan_end (dtype: datetime)
    rate (dtype: numeric)
    repaid (dtype: categorical)
    loan_id (dtype: index)
  Shape:
    (Rows: 443, Columns: 8)&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Featuretools correctly inferred each of the datatypes when we made this entity. We can also see that we overrode the type for the &lt;code&gt;repaid&lt;/code&gt; feature, changing if from numeric to categorical.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In&amp;nbsp;[16]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;es&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;payments&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

&lt;div class="prompt output_prompt"&gt;Out[16]:&lt;/div&gt;




&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;Entity: payments
  Variables:
    loan_id (dtype: numeric)
    payment_amount (dtype: numeric)
    payment_date (dtype: datetime_time_index)
    missed (dtype: categorical)
    payment_id (dtype: index)
  Shape:
    (Rows: 3456, Columns: 5)&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="Relationships"&gt;Relationships&lt;a class="anchor-link" href="#Relationships"&gt;&amp;#182;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;After defining the entities (tables) in an &lt;code&gt;EntitySet&lt;/code&gt;, we now need to tell featuretools &lt;a href="https://docs.featuretools.com/loading_data/using_entitysets.html#adding-a-relationship"&gt;how they are related with a relationship&lt;/a&gt;. The most intuitive way to think of relationships is with the parent to child analogy: a parent-to-child relationship is one-to-many because for each parent, there can be multiple children. The &lt;code&gt;client&lt;/code&gt; dataframe is therefore the parent of the &lt;code&gt;loans&lt;/code&gt; dataframe because while there is only one row for each client in the &lt;code&gt;client&lt;/code&gt; dataframe, each client may have several previous loans covering multiple rows in the &lt;code&gt;loans&lt;/code&gt; dataframe. Likewise, the &lt;code&gt;loans&lt;/code&gt; dataframe is the parent of the &lt;code&gt;payments&lt;/code&gt; dataframe because each loan will have multiple payments.&lt;/p&gt;
&lt;p&gt;These relationships are what allow us to group together datapoints using aggregation primitives and then create new features. As an example, we can group all of the previous loans associated with one client and find the average loan amount. We will discuss the features themselves more in a little bit, but for now let's define the relationships.&lt;/p&gt;
&lt;p&gt;To define relationships, we need to specify the parent variable and the child variable. This is the variable that links two entities together. In our example, the &lt;code&gt;client&lt;/code&gt; and &lt;code&gt;loans&lt;/code&gt; dataframes are linked together by the &lt;code&gt;client_id&lt;/code&gt; column. Again, this is a parent to child relationship because for each &lt;code&gt;client_id&lt;/code&gt; in the parent &lt;code&gt;client&lt;/code&gt; dataframe, there may be multiple entries of the same &lt;code&gt;client_id&lt;/code&gt; in the child &lt;code&gt;loans&lt;/code&gt; dataframe.&lt;/p&gt;
&lt;p&gt;We codify relationships in the language of featuretools by specifying the parent variable and then the child variable. After creating a relationship, we add it to the &lt;code&gt;EntitySet&lt;/code&gt;.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In&amp;nbsp;[17]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Relationship between clients and previous loans&lt;/span&gt;
&lt;span class="n"&gt;r_client_previous&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ft&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Relationship&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;es&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;clients&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;client_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                                    &lt;span class="n"&gt;es&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;loans&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;client_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c1"&gt;# Add the relationship to the entity set&lt;/span&gt;
&lt;span class="n"&gt;es&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;es&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_relationship&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r_client_previous&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;The relationship has now been stored in the entity set. The second relationship is between the &lt;code&gt;loans&lt;/code&gt; and &lt;code&gt;payments&lt;/code&gt;. These two entities are related by the &lt;code&gt;loan_id&lt;/code&gt; variable.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In&amp;nbsp;[18]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Relationship between previous loans and previous payments&lt;/span&gt;
&lt;span class="n"&gt;r_payments&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ft&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Relationship&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;es&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;loans&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;loan_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                                      &lt;span class="n"&gt;es&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;payments&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;loan_id&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c1"&gt;# Add the relationship to the entity set&lt;/span&gt;
&lt;span class="n"&gt;es&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;es&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;add_relationship&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;r_payments&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;es&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

&lt;div class="prompt output_prompt"&gt;Out[18]:&lt;/div&gt;




&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;Entityset: clients
  Entities:
    clients [Rows: 25, Columns: 6]
    loans [Rows: 443, Columns: 8]
    payments [Rows: 3456, Columns: 5]
  Relationships:
    loans.client_id -&amp;gt; clients.client_id
    payments.loan_id -&amp;gt; loans.loan_id&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;We now have our entities in an entityset along with the relationships between them. We can now start to making new features from all of the tables using stacks of feature primitives to form deep features. First, let's cover feature primitives.&lt;/p&gt;
&lt;h2 id="Feature-Primitives"&gt;Feature Primitives&lt;a class="anchor-link" href="#Feature-Primitives"&gt;&amp;#182;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;A &lt;a href="https://docs.featuretools.com/automated_feature_engineering/primitives.html"&gt;feature primitive&lt;/a&gt; a at a very high-level is an operation applied to data to create a feature. These represent very simple calculations that can be stacked on top of each other to create complex features. Feature primitives fall into two categories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Aggregation&lt;/strong&gt;: function that groups together child datapoints for each parent and then calculates a statistic such as mean, min, max, or standard deviation. An example is calculating the maximum loan amount for each client. An aggregation works across multiple tables using relationships between tables.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Transformation&lt;/strong&gt;: an operation applied to one or more columns in a single table. An example would be extracting the day from dates, or finding the difference between two columns in one table.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let's take a look at feature primitives in featuretools. We can view the list of primitives:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In&amp;nbsp;[19]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;primitives&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ft&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list_primitives&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;display&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;max_colwidth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;span class="n"&gt;primitives&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;primitives&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;aggregation&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

&lt;div class="prompt output_prompt"&gt;Out[19]:&lt;/div&gt;



&lt;div class="output_html rendered_html output_subarea output_execute_result"&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;name&lt;/th&gt;
      &lt;th&gt;type&lt;/th&gt;
      &lt;th&gt;description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;mode&lt;/td&gt;
      &lt;td&gt;aggregation&lt;/td&gt;
      &lt;td&gt;Finds the most common element in a categorical feature.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;any&lt;/td&gt;
      &lt;td&gt;aggregation&lt;/td&gt;
      &lt;td&gt;Test if any value is 'True'.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;last&lt;/td&gt;
      &lt;td&gt;aggregation&lt;/td&gt;
      &lt;td&gt;Returns the last value.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;all&lt;/td&gt;
      &lt;td&gt;aggregation&lt;/td&gt;
      &lt;td&gt;Test if all values are 'True'.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;median&lt;/td&gt;
      &lt;td&gt;aggregation&lt;/td&gt;
      &lt;td&gt;Finds the median value of any feature with well-ordered values.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;5&lt;/th&gt;
      &lt;td&gt;min&lt;/td&gt;
      &lt;td&gt;aggregation&lt;/td&gt;
      &lt;td&gt;Finds the minimum non-null value of a numeric feature.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;6&lt;/th&gt;
      &lt;td&gt;avg_time_between&lt;/td&gt;
      &lt;td&gt;aggregation&lt;/td&gt;
      &lt;td&gt;Computes the average time between consecutive events.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;7&lt;/th&gt;
      &lt;td&gt;max&lt;/td&gt;
      &lt;td&gt;aggregation&lt;/td&gt;
      &lt;td&gt;Finds the maximum non-null value of a numeric feature.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;8&lt;/th&gt;
      &lt;td&gt;n_most_common&lt;/td&gt;
      &lt;td&gt;aggregation&lt;/td&gt;
      &lt;td&gt;Finds the N most common elements in a categorical feature.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;9&lt;/th&gt;
      &lt;td&gt;percent_true&lt;/td&gt;
      &lt;td&gt;aggregation&lt;/td&gt;
      &lt;td&gt;Finds the percent of 'True' values in a boolean feature.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In&amp;nbsp;[20]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;primitives&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;primitives&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;type&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;transform&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

&lt;div class="prompt output_prompt"&gt;Out[20]:&lt;/div&gt;



&lt;div class="output_html rendered_html output_subarea output_execute_result"&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;name&lt;/th&gt;
      &lt;th&gt;type&lt;/th&gt;
      &lt;th&gt;description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;19&lt;/th&gt;
      &lt;td&gt;add&lt;/td&gt;
      &lt;td&gt;transform&lt;/td&gt;
      &lt;td&gt;Creates a transform feature that adds two features.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;20&lt;/th&gt;
      &lt;td&gt;seconds&lt;/td&gt;
      &lt;td&gt;transform&lt;/td&gt;
      &lt;td&gt;Transform a Timedelta feature into the number of seconds.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;21&lt;/th&gt;
      &lt;td&gt;time_since_previous&lt;/td&gt;
      &lt;td&gt;transform&lt;/td&gt;
      &lt;td&gt;Compute the time since the previous instance.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;22&lt;/th&gt;
      &lt;td&gt;cum_min&lt;/td&gt;
      &lt;td&gt;transform&lt;/td&gt;
      &lt;td&gt;Calculates the min of previous values of an instance for each value in a time-dependent entity.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;23&lt;/th&gt;
      &lt;td&gt;divide&lt;/td&gt;
      &lt;td&gt;transform&lt;/td&gt;
      &lt;td&gt;Creates a transform feature that divides two features.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;24&lt;/th&gt;
      &lt;td&gt;hour&lt;/td&gt;
      &lt;td&gt;transform&lt;/td&gt;
      &lt;td&gt;Transform a Datetime feature into the hour.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;25&lt;/th&gt;
      &lt;td&gt;and&lt;/td&gt;
      &lt;td&gt;transform&lt;/td&gt;
      &lt;td&gt;For two boolean values, determine if both values are 'True'.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;26&lt;/th&gt;
      &lt;td&gt;or&lt;/td&gt;
      &lt;td&gt;transform&lt;/td&gt;
      &lt;td&gt;For two boolean values, determine if one value is 'True'.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;27&lt;/th&gt;
      &lt;td&gt;years&lt;/td&gt;
      &lt;td&gt;transform&lt;/td&gt;
      &lt;td&gt;Transform a Timedelta feature into the number of years.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;28&lt;/th&gt;
      &lt;td&gt;isin&lt;/td&gt;
      &lt;td&gt;transform&lt;/td&gt;
      &lt;td&gt;For each value of the base feature, checks whether it is in a provided list.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;If featuretools does not have enough primitives for us, we can &lt;a href="https://docs.featuretools.com/automated_feature_engineering/primitives.html#defining-custom-primitives"&gt;also make our own.&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;To get an idea of what a feature primitive actually does, let's try out a few on our data. Using primitives is surprisingly easy using the &lt;code&gt;ft.dfs&lt;/code&gt; function (which stands for deep feature synthesis). In this function, we specify the entityset to use; the &lt;code&gt;target_entity&lt;/code&gt;, which is the dataframe we want to make the features for (where the features end up); the &lt;code&gt;agg_primitives&lt;/code&gt; which are the aggregation feature primitives; and the &lt;code&gt;trans_primitives&lt;/code&gt; which are the transformation primitives to apply.&lt;/p&gt;
&lt;p&gt;In the following example, we are using the &lt;code&gt;EntitySet&lt;/code&gt; we already created, the target entity is the &lt;code&gt;clients&lt;/code&gt; dataframe because we want to make new features about each client, and then we specify a few aggregation and transformation primitives.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In&amp;nbsp;[21]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Create new features using specified primitives&lt;/span&gt;
&lt;span class="n"&gt;features&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;feature_names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ft&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dfs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entityset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;es&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target_entity&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;clients&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                                 &lt;span class="n"&gt;agg_primitives&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;mean&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;max&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;percent_true&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;last&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
                                 &lt;span class="n"&gt;trans_primitives&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;years&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;month&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;subtract&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;divide&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In&amp;nbsp;[22]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;features&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MONTH(joined)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

&lt;div class="prompt output_prompt"&gt;Out[22]:&lt;/div&gt;



&lt;div class="output_html rendered_html output_subarea output_execute_result"&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;MONTH(joined)&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;client_id&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;25707&lt;/th&gt;
      &lt;td&gt;10&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;26326&lt;/th&gt;
      &lt;td&gt;5&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;26695&lt;/th&gt;
      &lt;td&gt;8&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;26945&lt;/th&gt;
      &lt;td&gt;11&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;29841&lt;/th&gt;
      &lt;td&gt;8&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In&amp;nbsp;[23]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;features&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MEAN(payments.payment_amount)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

&lt;div class="prompt output_prompt"&gt;Out[23]:&lt;/div&gt;



&lt;div class="output_html rendered_html output_subarea output_execute_result"&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;MEAN(payments.payment_amount)&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;client_id&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;25707&lt;/th&gt;
      &lt;td&gt;1178.552795&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;26326&lt;/th&gt;
      &lt;td&gt;1166.736842&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;26695&lt;/th&gt;
      &lt;td&gt;1207.433824&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;26945&lt;/th&gt;
      &lt;td&gt;1109.473214&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;29841&lt;/th&gt;
      &lt;td&gt;1439.433333&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In&amp;nbsp;[24]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;features&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

&lt;div class="prompt output_prompt"&gt;Out[24]:&lt;/div&gt;



&lt;div class="output_html rendered_html output_subarea output_execute_result"&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;income&lt;/th&gt;
      &lt;th&gt;credit_score&lt;/th&gt;
      &lt;th&gt;join_month&lt;/th&gt;
      &lt;th&gt;log_income&lt;/th&gt;
      &lt;th&gt;MEAN(loans.loan_amount)&lt;/th&gt;
      &lt;th&gt;MEAN(loans.rate)&lt;/th&gt;
      &lt;th&gt;MAX(loans.loan_amount)&lt;/th&gt;
      &lt;th&gt;MAX(loans.rate)&lt;/th&gt;
      &lt;th&gt;LAST(loans.loan_type)&lt;/th&gt;
      &lt;th&gt;LAST(loans.loan_amount)&lt;/th&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;th&gt;log_income - income / MAX(payments.payment_amount)&lt;/th&gt;
      &lt;th&gt;LAST(loans.loan_amount) / income&lt;/th&gt;
      &lt;th&gt;log_income - credit_score / join_month&lt;/th&gt;
      &lt;th&gt;join_month - log_income / MEAN(loans.loan_amount)&lt;/th&gt;
      &lt;th&gt;join_month / income - join_month&lt;/th&gt;
      &lt;th&gt;credit_score - log_income / LAST(loans.rate)&lt;/th&gt;
      &lt;th&gt;join_month - log_income / MAX(loans.loan_amount)&lt;/th&gt;
      &lt;th&gt;credit_score - income / join_month - log_income&lt;/th&gt;
      &lt;th&gt;join_month - income / MEAN(payments.payment_amount)&lt;/th&gt;
      &lt;th&gt;join_month - credit_score / log_income - credit_score&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;client_id&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;25707&lt;/th&gt;
      &lt;td&gt;211422&lt;/td&gt;
      &lt;td&gt;621&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;12.261611&lt;/td&gt;
      &lt;td&gt;7963.950000&lt;/td&gt;
      &lt;td&gt;3.477000&lt;/td&gt;
      &lt;td&gt;13913&lt;/td&gt;
      &lt;td&gt;9.44&lt;/td&gt;
      &lt;td&gt;home&lt;/td&gt;
      &lt;td&gt;2203&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;-78.184075&lt;/td&gt;
      &lt;td&gt;0.010420&lt;/td&gt;
      &lt;td&gt;-60.873839&lt;/td&gt;
      &lt;td&gt;-0.000284&lt;/td&gt;
      &lt;td&gt;0.000047&lt;/td&gt;
      &lt;td&gt;82.261944&lt;/td&gt;
      &lt;td&gt;-0.000163&lt;/td&gt;
      &lt;td&gt;93208.319781&lt;/td&gt;
      &lt;td&gt;-179.382715&lt;/td&gt;
      &lt;td&gt;1.003715&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;26326&lt;/th&gt;
      &lt;td&gt;227920&lt;/td&gt;
      &lt;td&gt;633&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;12.336750&lt;/td&gt;
      &lt;td&gt;7270.062500&lt;/td&gt;
      &lt;td&gt;2.517500&lt;/td&gt;
      &lt;td&gt;13464&lt;/td&gt;
      &lt;td&gt;6.73&lt;/td&gt;
      &lt;td&gt;credit&lt;/td&gt;
      &lt;td&gt;5275&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;-85.744042&lt;/td&gt;
      &lt;td&gt;0.023144&lt;/td&gt;
      &lt;td&gt;-124.132650&lt;/td&gt;
      &lt;td&gt;-0.001009&lt;/td&gt;
      &lt;td&gt;0.000022&lt;/td&gt;
      &lt;td&gt;428.043621&lt;/td&gt;
      &lt;td&gt;-0.000545&lt;/td&gt;
      &lt;td&gt;30979.248435&lt;/td&gt;
      &lt;td&gt;-195.343964&lt;/td&gt;
      &lt;td&gt;1.011821&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;26695&lt;/th&gt;
      &lt;td&gt;174532&lt;/td&gt;
      &lt;td&gt;680&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;12.069863&lt;/td&gt;
      &lt;td&gt;7824.722222&lt;/td&gt;
      &lt;td&gt;2.466111&lt;/td&gt;
      &lt;td&gt;14865&lt;/td&gt;
      &lt;td&gt;6.51&lt;/td&gt;
      &lt;td&gt;other&lt;/td&gt;
      &lt;td&gt;13918&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;-59.522486&lt;/td&gt;
      &lt;td&gt;0.079745&lt;/td&gt;
      &lt;td&gt;-83.491267&lt;/td&gt;
      &lt;td&gt;-0.000520&lt;/td&gt;
      &lt;td&gt;0.000046&lt;/td&gt;
      &lt;td&gt;742.144596&lt;/td&gt;
      &lt;td&gt;-0.000274&lt;/td&gt;
      &lt;td&gt;42716.912967&lt;/td&gt;
      &lt;td&gt;-144.541255&lt;/td&gt;
      &lt;td&gt;1.006093&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;26945&lt;/th&gt;
      &lt;td&gt;214516&lt;/td&gt;
      &lt;td&gt;806&lt;/td&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;12.276140&lt;/td&gt;
      &lt;td&gt;7125.933333&lt;/td&gt;
      &lt;td&gt;2.855333&lt;/td&gt;
      &lt;td&gt;14593&lt;/td&gt;
      &lt;td&gt;5.65&lt;/td&gt;
      &lt;td&gt;cash&lt;/td&gt;
      &lt;td&gt;9249&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;-77.494120&lt;/td&gt;
      &lt;td&gt;0.043116&lt;/td&gt;
      &lt;td&gt;-72.156715&lt;/td&gt;
      &lt;td&gt;-0.000179&lt;/td&gt;
      &lt;td&gt;0.000051&lt;/td&gt;
      &lt;td&gt;277.525825&lt;/td&gt;
      &lt;td&gt;-0.000087&lt;/td&gt;
      &lt;td&gt;167466.003631&lt;/td&gt;
      &lt;td&gt;-193.339503&lt;/td&gt;
      &lt;td&gt;1.001608&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;29841&lt;/th&gt;
      &lt;td&gt;38354&lt;/td&gt;
      &lt;td&gt;523&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;10.554614&lt;/td&gt;
      &lt;td&gt;9813.000000&lt;/td&gt;
      &lt;td&gt;3.445000&lt;/td&gt;
      &lt;td&gt;14837&lt;/td&gt;
      &lt;td&gt;6.76&lt;/td&gt;
      &lt;td&gt;home&lt;/td&gt;
      &lt;td&gt;7223&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;-13.231003&lt;/td&gt;
      &lt;td&gt;0.188325&lt;/td&gt;
      &lt;td&gt;-64.055673&lt;/td&gt;
      &lt;td&gt;-0.000260&lt;/td&gt;
      &lt;td&gt;0.000209&lt;/td&gt;
      &lt;td&gt;100.676893&lt;/td&gt;
      &lt;td&gt;-0.000172&lt;/td&gt;
      &lt;td&gt;14808.890291&lt;/td&gt;
      &lt;td&gt;-26.639650&lt;/td&gt;
      &lt;td&gt;1.004985&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;5 rows × 797 columns&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Already we can see how useful featuretools is: it performed the same operations we did manually but also many more in addition. Examining the names of the features in the dataframe brings us to the final piece of the puzzle: deep features.&lt;/p&gt;
&lt;h2 id="Deep-Feature-Synthesis"&gt;Deep Feature Synthesis&lt;a class="anchor-link" href="#Deep-Feature-Synthesis"&gt;&amp;#182;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;While feature primitives are useful by themselves, the main benefit of using featuretools arises when we stack primitives to get deep features. The depth of a feature is simply the number of primitives required to make a feature. So, a feature that relies on a single aggregation would be a deep feature with a depth of 1, a feature that stacks two primitives would have a depth of 2 and so on. The idea itself is lot simpler than the name "deep feature synthesis" implies. (I think the authors were trying to ride the way of deep neural network hype when they named the method!) To read more about deep feature synthesis, check out &lt;a href="https://docs.featuretools.com/automated_feature_engineering/afe.html"&gt;the documentation&lt;/a&gt; or the &lt;a href="http://www.jmaxkanter.com/static/papers/DSAA_DSM_2015.pdf"&gt;original paper by Max Kanter et al&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Already in the dataframe we made by specifying the primitives manually we can see the idea of feature depth. For instance, the MEAN(loans.loan_amount) feature has a depth of 1 because it is made by applying a single aggregation primitive. This feature represents the average size of a client's previous loans.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In&amp;nbsp;[25]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Show a feature with a depth of 1&lt;/span&gt;
&lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;features&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;MEAN(loans.loan_amount)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

&lt;div class="prompt output_prompt"&gt;Out[25]:&lt;/div&gt;



&lt;div class="output_html rendered_html output_subarea output_execute_result"&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;MEAN(loans.loan_amount)&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;client_id&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;25707&lt;/th&gt;
      &lt;td&gt;7963.950000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;26326&lt;/th&gt;
      &lt;td&gt;7270.062500&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;26695&lt;/th&gt;
      &lt;td&gt;7824.722222&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;26945&lt;/th&gt;
      &lt;td&gt;7125.933333&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;29841&lt;/th&gt;
      &lt;td&gt;9813.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;32726&lt;/th&gt;
      &lt;td&gt;6633.263158&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;32885&lt;/th&gt;
      &lt;td&gt;9920.400000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;32961&lt;/th&gt;
      &lt;td&gt;7882.235294&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;35089&lt;/th&gt;
      &lt;td&gt;6939.200000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;35214&lt;/th&gt;
      &lt;td&gt;7173.555556&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;As well scroll through the features, we see a number of features with a depth of 2. For example, the LAST(loans.(MEAN(payments.payment_amount))) has depth = 2 because it is made by stacking two feature primitives, first an aggregation and then a transformation. This feature represents the average payment amount for the last (most recent) loan for each client.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In&amp;nbsp;[26]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Show a feature with a depth of 2&lt;/span&gt;
&lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;features&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;LAST(loans.MEAN(payments.payment_amount))&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

&lt;div class="prompt output_prompt"&gt;Out[26]:&lt;/div&gt;



&lt;div class="output_html rendered_html output_subarea output_execute_result"&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;LAST(loans.MEAN(payments.payment_amount))&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;client_id&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;25707&lt;/th&gt;
      &lt;td&gt;293.500000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;26326&lt;/th&gt;
      &lt;td&gt;977.375000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;26695&lt;/th&gt;
      &lt;td&gt;1769.166667&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;26945&lt;/th&gt;
      &lt;td&gt;1598.666667&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;29841&lt;/th&gt;
      &lt;td&gt;1125.500000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;32726&lt;/th&gt;
      &lt;td&gt;799.500000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;32885&lt;/th&gt;
      &lt;td&gt;1729.000000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;32961&lt;/th&gt;
      &lt;td&gt;282.600000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;35089&lt;/th&gt;
      &lt;td&gt;110.400000&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;35214&lt;/th&gt;
      &lt;td&gt;1410.250000&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;We can create features of arbitrary depth by stacking more primitives. However, when I have used featuretools I've never gone beyond a depth of 2! After this point, the features become very convoluted to understand. I'd encourage anyone interested to experiment with increasing the depth (maybe for a real problem) and see if there is value to "going deeper".&lt;/p&gt;
&lt;h2 id="Automated-Deep-Feature-Synthesis"&gt;Automated Deep Feature Synthesis&lt;a class="anchor-link" href="#Automated-Deep-Feature-Synthesis"&gt;&amp;#182;&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;In addition to manually specifying aggregation and transformation feature primitives, we can let featuretools automatically generate many new features. We do this by making the same &lt;code&gt;ft.dfs&lt;/code&gt; function call, but without passing in any primitives. We just set the &lt;code&gt;max_depth&lt;/code&gt; parameter and featuretools will automatically try many all combinations of feature primitives to the ordered depth.&lt;/p&gt;
&lt;p&gt;When running on large datasets, this process can take quite a while, but for our example data, it will be relatively quick. For this call, we only need to specify the &lt;code&gt;entityset&lt;/code&gt;, the &lt;code&gt;target_entity&lt;/code&gt; (which will again be &lt;code&gt;clients&lt;/code&gt;), and the &lt;code&gt;max_depth&lt;/code&gt;.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In&amp;nbsp;[27]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# Perform deep feature synthesis without specifying primitives&lt;/span&gt;
&lt;span class="n"&gt;features&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;feature_names&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ft&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;dfs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;entityset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;es&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;target_entity&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;clients&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                                 &lt;span class="n"&gt;max_depth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In&amp;nbsp;[28]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;features&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iloc&lt;/span&gt;&lt;span class="p"&gt;[:,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;:]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

&lt;div class="prompt output_prompt"&gt;Out[28]:&lt;/div&gt;



&lt;div class="output_html rendered_html output_subarea output_execute_result"&gt;
&lt;div&gt;
&lt;style scoped&gt;
    .dataframe tbody tr th:only-of-type {
        vertical-align: middle;
    }

    .dataframe tbody tr th {
        vertical-align: top;
    }

    .dataframe thead th {
        text-align: right;
    }
&lt;/style&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;SUM(loans.loan_amount)&lt;/th&gt;
      &lt;th&gt;SUM(loans.rate)&lt;/th&gt;
      &lt;th&gt;STD(loans.loan_amount)&lt;/th&gt;
      &lt;th&gt;STD(loans.rate)&lt;/th&gt;
      &lt;th&gt;MAX(loans.loan_amount)&lt;/th&gt;
      &lt;th&gt;MAX(loans.rate)&lt;/th&gt;
      &lt;th&gt;SKEW(loans.loan_amount)&lt;/th&gt;
      &lt;th&gt;SKEW(loans.rate)&lt;/th&gt;
      &lt;th&gt;MIN(loans.loan_amount)&lt;/th&gt;
      &lt;th&gt;MIN(loans.rate)&lt;/th&gt;
      &lt;th&gt;...&lt;/th&gt;
      &lt;th&gt;NUM_UNIQUE(loans.WEEKDAY(loan_end))&lt;/th&gt;
      &lt;th&gt;MODE(loans.MODE(payments.missed))&lt;/th&gt;
      &lt;th&gt;MODE(loans.DAY(loan_start))&lt;/th&gt;
      &lt;th&gt;MODE(loans.DAY(loan_end))&lt;/th&gt;
      &lt;th&gt;MODE(loans.YEAR(loan_start))&lt;/th&gt;
      &lt;th&gt;MODE(loans.YEAR(loan_end))&lt;/th&gt;
      &lt;th&gt;MODE(loans.MONTH(loan_start))&lt;/th&gt;
      &lt;th&gt;MODE(loans.MONTH(loan_end))&lt;/th&gt;
      &lt;th&gt;MODE(loans.WEEKDAY(loan_start))&lt;/th&gt;
      &lt;th&gt;MODE(loans.WEEKDAY(loan_end))&lt;/th&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;client_id&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;25707&lt;/th&gt;
      &lt;td&gt;159279&lt;/td&gt;
      &lt;td&gt;69.54&lt;/td&gt;
      &lt;td&gt;4044.418728&lt;/td&gt;
      &lt;td&gt;2.421285&lt;/td&gt;
      &lt;td&gt;13913&lt;/td&gt;
      &lt;td&gt;9.44&lt;/td&gt;
      &lt;td&gt;-0.172074&lt;/td&gt;
      &lt;td&gt;0.679118&lt;/td&gt;
      &lt;td&gt;1212&lt;/td&gt;
      &lt;td&gt;0.33&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;27&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2010&lt;/td&gt;
      &lt;td&gt;2007&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;26326&lt;/th&gt;
      &lt;td&gt;116321&lt;/td&gt;
      &lt;td&gt;40.28&lt;/td&gt;
      &lt;td&gt;4254.149422&lt;/td&gt;
      &lt;td&gt;1.991819&lt;/td&gt;
      &lt;td&gt;13464&lt;/td&gt;
      &lt;td&gt;6.73&lt;/td&gt;
      &lt;td&gt;0.135246&lt;/td&gt;
      &lt;td&gt;1.067853&lt;/td&gt;
      &lt;td&gt;1164&lt;/td&gt;
      &lt;td&gt;0.50&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;2003&lt;/td&gt;
      &lt;td&gt;2005&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;26695&lt;/th&gt;
      &lt;td&gt;140845&lt;/td&gt;
      &lt;td&gt;44.39&lt;/td&gt;
      &lt;td&gt;4078.228493&lt;/td&gt;
      &lt;td&gt;1.517660&lt;/td&gt;
      &lt;td&gt;14865&lt;/td&gt;
      &lt;td&gt;6.51&lt;/td&gt;
      &lt;td&gt;0.154467&lt;/td&gt;
      &lt;td&gt;0.820060&lt;/td&gt;
      &lt;td&gt;2389&lt;/td&gt;
      &lt;td&gt;0.22&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;14&lt;/td&gt;
      &lt;td&gt;2003&lt;/td&gt;
      &lt;td&gt;2005&lt;/td&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;26945&lt;/th&gt;
      &lt;td&gt;106889&lt;/td&gt;
      &lt;td&gt;42.83&lt;/td&gt;
      &lt;td&gt;4389.555657&lt;/td&gt;
      &lt;td&gt;1.564795&lt;/td&gt;
      &lt;td&gt;14593&lt;/td&gt;
      &lt;td&gt;5.65&lt;/td&gt;
      &lt;td&gt;0.156534&lt;/td&gt;
      &lt;td&gt;-0.001998&lt;/td&gt;
      &lt;td&gt;653&lt;/td&gt;
      &lt;td&gt;0.13&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;16&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;2002&lt;/td&gt;
      &lt;td&gt;2004&lt;/td&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;29841&lt;/th&gt;
      &lt;td&gt;176634&lt;/td&gt;
      &lt;td&gt;62.01&lt;/td&gt;
      &lt;td&gt;4090.630609&lt;/td&gt;
      &lt;td&gt;2.063092&lt;/td&gt;
      &lt;td&gt;14837&lt;/td&gt;
      &lt;td&gt;6.76&lt;/td&gt;
      &lt;td&gt;-0.212397&lt;/td&gt;
      &lt;td&gt;0.050600&lt;/td&gt;
      &lt;td&gt;2778&lt;/td&gt;
      &lt;td&gt;0.26&lt;/td&gt;
      &lt;td&gt;...&lt;/td&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;15&lt;/td&gt;
      &lt;td&gt;2005&lt;/td&gt;
      &lt;td&gt;2007&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;5 rows × 90 columns&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;Deep feature synthesis has created 90 new features out of the existing data! While we could have created all of these manually, I am glad to not have to write all that code by hand. The primary benefit of featuretools is that it creates features without any subjective human biases. Even a human with considerable domain knowledge will be limited by their imagination when making new features (not to mention time). Automated feature engineering is not limited by these factors (instead it's limited by computation time) and provides a good starting point for feature creation. This process likely will not remove the human contribution to feature engineering completely because a human can still use domain knowledge and machine learning expertise to select the most important features or build new features from those suggested by automated deep feature synthesis.&lt;/p&gt;
&lt;h1 id="Next-Steps"&gt;Next Steps&lt;a class="anchor-link" href="#Next-Steps"&gt;&amp;#182;&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;While automatic feature engineering solves one problem, it provides us with another problem: too many features! Although it's difficult to say which features will be important to a given machine learning task ahead of time, it's likely that not all of the features made by featuretools add value. In fact, having too many features is a significant issue in machine learning because it makes training a model much harder. The &lt;a href="https://pdfs.semanticscholar.org/a83b/ddb34618cc68f1014ca12eef7f537825d104.pdf"&gt;irrelevant features can drown out the important features&lt;/a&gt;, leaving a model unable to learn how to map the features to the target.&lt;/p&gt;
&lt;p&gt;This problem is known as the &lt;a href="https://en.wikipedia.org/wiki/Curse_of_dimensionality#Machine_learning"&gt;"curse of dimensionality"&lt;/a&gt; and is addressed through the process of &lt;a href="http://scikit-learn.org/stable/modules/feature_selection.html"&gt;feature reduction and selection&lt;/a&gt;, which means &lt;a href="https://machinelearningmastery.com/feature-selection-machine-learning-python/"&gt;removing low-value features&lt;/a&gt; from the data. Defining which features are useful is an important problem where a data scientist can still add considerable value to the feature engineering task. Feature reduction will have to be another topic for another day!&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h1 id="Conclusions"&gt;Conclusions&lt;a class="anchor-link" href="#Conclusions"&gt;&amp;#182;&lt;/a&gt;&lt;/h1&gt;&lt;p&gt;In this notebook, we saw how to apply automated feature engineering to an example dataset. This is a powerful method which allows us to overcome the human limits of time and imagination to create many new features from multiple tables of data. Featuretools is built on the idea of deep feature synthesis, which means stacking multiple simple feature primitives - &lt;strong&gt;aggregations and transformations&lt;/strong&gt; - to create new features. Feature engineering allows us to combine information across many tables into a single dataframe that we can then use for machine learning model training. Finally, the next step after creating all of these features is figuring out which ones are important.&lt;/p&gt;
&lt;p&gt;Featuretools is currently the only Python option for this process, but with the recent emphasis on automating aspects of the machine learning pipeline, other competitiors will probably enter the sphere. While the exact tools will change, the idea of automatically creating new features out of existing data will grow in importance. Staying up-to-date on methods such as automated feature engineering is crucial in the rapidly changing field of data science. Now go out there and find a problem on which to apply featuretools!&lt;/p&gt;
&lt;p&gt;For more information, check out the &lt;a href="https://docs.featuretools.com/index.html"&gt;documentation for featuretools&lt;/a&gt;. Also, read about how featuretools is &lt;a href="https://www.featurelabs.com/"&gt;used in the real world by Feature Labs&lt;/a&gt;, the company behind the open-source library.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
 

&lt;/p&gt;</content><category term="python"></category><category term="featuretools"></category><category term="feature engineering"></category><category term="data science"></category></entry><entry><title>How to move ElasticSearch data directory</title><link href="https://krinkere.github.io/krinkersite/how_to_move_elasticsearch_data_directory.html" rel="alternate"></link><published>2018-06-08T14:14:00-04:00</published><updated>2018-06-08T14:30:00-04:00</updated><author><name>Al Krinker</name></author><id>tag:krinkere.github.io,2018-06-08:/krinkersite/how_to_move_elasticsearch_data_directory.html</id><summary type="html">&lt;p&gt;When directory of ES data is full, you need to move it in order to avoid index read-only error&lt;/p&gt;</summary><content type="html">&lt;p&gt;I was currently working on a project where I had to ingest massive amounts of data into ElasticSearch and I defaulted to /var/lib/elasticsearch to store all of my data. 
I admit it was a mistake as I soon was starring at a 403 error from my cluster.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;{&lt;/span&gt;
&lt;span class="go"&gt;  &amp;quot;type&amp;quot;: &amp;quot;cluster_block_exception&amp;quot;,&lt;/span&gt;
&lt;span class="go"&gt;  &amp;quot;reason&amp;quot;: &amp;quot;blocked by: [FORBIDDEN/12/index read-only / allow delete (api)];&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;After quick google search and verifying that I was truly low on space by issusing df -h command, I had to move my data. Below are the steps that I took&lt;br /&gt;
1. Determine current location of data files, if in doubt (curl "localhost:9200/_nodes/settings?pretty=true")&lt;br /&gt;
2. Figure out where you have space and create a directory in it, let's say mega_elasticdata_dir&lt;br /&gt;
3. Stop ElastiSearch service: systemctl stop elasticsearch.service&lt;br /&gt;
4. Navigate to the current data directory determined in step 1 and move or copy files to new location (cp -RP * /mega_elasticdata_dir/)&lt;br /&gt;
5. Change ownership on new directory to elasticsearch (sudo chown -R elasticsearch:elasticsearch /mega_elasticdata_dir)&lt;br /&gt;
6. Edit data path inside of /etc/elasticsearch/elasticsearch.yml by changing parameter “path.data:”&lt;br /&gt;
7. Start ElasticSearch service again (systemctl start elasticsearch.service)&lt;br /&gt;
8. Check ElasticSearch log for any errors (tail -500f /var/log/elasticsearch/elasticsearch.log)&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;At this point, you have moved the data, but if you were to try to index any data, you would still get the same error message even now that you have plenty of space.
This is because ElasticSearch has switched to read-only mode when it could not index more documents (when the hard drive got full). This is done to ensure 
availability for read-only queries. ElasticSearch will not switch back automatically and you have to reset the flag manually by sending following command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;curl -XPUT -H &amp;quot;Content-Type: application/json&amp;quot; http://localhost:9200/_all/_settings -d &amp;#39;{&amp;quot;index.blocks.read_only_allow_delete&amp;quot;: null}&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;References:&lt;br /&gt;
&lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/settings.html"&gt;ElasticSearch Settings&lt;/a&gt;&lt;br /&gt;
&lt;a href="https://www.elastic.co/guide/en/elasticsearch/reference/6.2/disk-allocator.html"&gt;Disk Allocator&lt;/a&gt;&lt;/p&gt;</content><category term="elasticsearch"></category><category term="devops"></category></entry><entry><title>How to move MariaDB data to another location</title><link href="https://krinkere.github.io/krinkersite/move_mariadb_data.html" rel="alternate"></link><published>2018-05-30T12:25:00-04:00</published><updated>2018-05-30T13:05:00-04:00</updated><author><name>Al Krinker</name></author><id>tag:krinkere.github.io,2018-05-30:/krinkersite/move_mariadb_data.html</id><summary type="html">&lt;p&gt;Shows how to successfully move mariadb instance to another location&lt;/p&gt;</summary><content type="html">&lt;p&gt;I was recently working on an instance of MariaDB where I loaded almost 200GB of data. My /var folder 
filled up almost to 90% and I got all sorts of warning logs about size limitations, etc. Before it turned into bigger issue, I decided to take proactive approach and move my data to another location.&lt;/p&gt;
&lt;h2&gt;Useful command to check the size&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; sudo du -sch *
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Verify current data directory location&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; mysql -u root -p

&lt;span class="go"&gt;Welcome to the MariaDB monitor.  Commands end with ; or \g.&lt;/span&gt;
&lt;span class="go"&gt;Your MariaDB connection id is 4&lt;/span&gt;
&lt;span class="go"&gt;Server version: 10.1.33-MariaDB MariaDB Server&lt;/span&gt;

&lt;span class="go"&gt;Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others.&lt;/span&gt;

&lt;span class="go"&gt;Type &amp;#39;help;&amp;#39; or &amp;#39;\h&amp;#39; for help. Type &amp;#39;\c&amp;#39; to clear the current input statement.&lt;/span&gt;

&lt;span class="go"&gt;MariaDB [(none)]&amp;gt; select @@datadir;&lt;/span&gt;
&lt;span class="go"&gt;+--------------------------+&lt;/span&gt;
&lt;span class="go"&gt;| @@datadir                |&lt;/span&gt;
&lt;span class="go"&gt;+--------------------------+&lt;/span&gt;
&lt;span class="go"&gt;| /var/lib/mysql/ |&lt;/span&gt;
&lt;span class="go"&gt;+--------------------------+&lt;/span&gt;
&lt;span class="go"&gt;1 row in set (0.00 sec)&lt;/span&gt;

&lt;span class="go"&gt;MariaDB [(none)]&amp;gt; exit&lt;/span&gt;
&lt;span class="go"&gt;Bye&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Stop running mariadb instance&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; sudo systemctl stop mariadb
&lt;span class="gp"&gt;$&lt;/span&gt; sudo systemctl status mariadb
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Double check if instance is running (Force kill any rogue mysql processes) and check if port 3306 is still occupied&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt;  ps -elf&lt;span class="p"&gt;|&lt;/span&gt;grep mysql
&lt;span class="gp"&gt;$&lt;/span&gt; netstat -apn &lt;span class="p"&gt;|&lt;/span&gt; grep &lt;span class="m"&gt;3306&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Move data to new location and back up old instance&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; sudo rsync -av /var/lib/mysql /mnt/big_data
&lt;span class="gp"&gt;$&lt;/span&gt; sudo mv /var/lib/mysql /var/lib/mysql.bak
&lt;/pre&gt;&lt;/div&gt;


&lt;h2&gt;Edit configuration files to change the defaults.&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;&amp;quot;/etc/my.cnf&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt;[mysqld]&lt;/span&gt;
&lt;span class="go"&gt;datadir=/mnt/big_data/mysql/&lt;/span&gt;
&lt;span class="go"&gt;socket=/mnt/big_data/mysql/mysql.sock&lt;/span&gt;

&lt;span class="go"&gt;&amp;quot;/etc/my.cnf.d/client.cnf&amp;quot;&lt;/span&gt;
&lt;span class="go"&gt;[client]&lt;/span&gt;
&lt;span class="go"&gt;port=3306&lt;/span&gt;
&lt;span class="go"&gt;socket=/mnt/big_data/mysql/mysql.sock&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I also had to chmod  new directory, otherwise mariadb was failing since it could not write to the new location.&lt;/p&gt;
&lt;h2&gt;Start it back up and make sure that new directory is in use&lt;/h2&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; sudo systemctl start mariadb
&lt;span class="gp"&gt;$&lt;/span&gt; sudo systemctl status mariadb

&lt;span class="gp"&gt;$&lt;/span&gt; mysql -u root -p
&lt;span class="go"&gt;MariaDB [(none)]&amp;gt; select @@datadir;&lt;/span&gt;
&lt;span class="go"&gt;+--------------------------+&lt;/span&gt;
&lt;span class="go"&gt;| @@datadir                |&lt;/span&gt;
&lt;span class="go"&gt;+--------------------------+&lt;/span&gt;
&lt;span class="go"&gt;| /mnt/big_data/mysql/ |&lt;/span&gt;
&lt;span class="go"&gt;+--------------------------+&lt;/span&gt;
&lt;span class="go"&gt;1 row in set (0.00 sec)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://www.digitalocean.com/community/tutorials/how-to-change-a-mariadb-data-directory-to-a-new-location-on-centos-7"&gt;Partial Reference&lt;/a&gt;&lt;/p&gt;</content><category term="mariadb"></category><category term="linux"></category><category term="database"></category><category term="system"></category></entry><entry><title>How to install Google Chrome on your Linux System</title><link href="https://krinkere.github.io/krinkersite/install_chrome_on_linux.html" rel="alternate"></link><published>2018-05-29T08:51:00-04:00</published><updated>2018-05-29T09:01:00-04:00</updated><author><name>Al Krinker</name></author><id>tag:krinkere.github.io,2018-05-29:/krinkersite/install_chrome_on_linux.html</id><summary type="html">&lt;p&gt;How to install Google Chrome on your Linux system&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Enable Google Yum repository&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Create a file called /etc/yum.repos.d/google-chrome.repo and add the following lines of code to it.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[google-chrome]&lt;/span&gt;
&lt;span class="na"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;google-chrome&lt;/span&gt;
&lt;span class="na"&gt;baseurl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;http://dl.google.com/linux/chrome/rpm/stable/$basearch&lt;/span&gt;
&lt;span class="na"&gt;enabled&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;1&lt;/span&gt;
&lt;span class="na"&gt;gpgcheck&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;1&lt;/span&gt;
&lt;span class="na"&gt;gpgkey&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;https://dl-ssl.google.com/linux/linux_signing_key.pub&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Install key&lt;/h1&gt;
&lt;p&gt;-Refer to this &lt;a href="https://www.google.com/linuxrepositories/"&gt;guide&lt;/a&gt; for more details.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;wget&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;no&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;check&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;certificate&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;dl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;google&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;linux&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;linux_signing_key&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pub&lt;/span&gt;
&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;rpm&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;linux_signing_key.pub&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Install Google Chrome&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo yum install google-chrome-stable
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;Start Google Chrome&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ google-chrome &lt;span class="p"&gt;&amp;amp;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="linux"></category><category term="chrome"></category></entry><entry><title>Layman's Introduction to Random Forests</title><link href="https://krinkere.github.io/krinkersite/layman_random_forrest.html" rel="alternate"></link><published>2018-04-20T12:27:00-04:00</published><updated>2018-04-20T12:30:00-04:00</updated><author><name>Al Krinker</name></author><id>tag:krinkere.github.io,2018-04-20:/krinkersite/layman_random_forrest.html</id><summary type="html">&lt;p&gt;Layman's Introduction to Random Forests by Edwin Chen&lt;/p&gt;</summary><content type="html">&lt;p&gt;Suppose you’re very indecisive, so whenever you want to watch a movie, you ask your friend Willow if she thinks you’ll like it. In order to answer, Willow first needs to figure out what movies you like, so you give her a bunch of movies and tell her whether you liked each one or not (i.e., you give her a labeled training set). Then, when you ask her if she thinks you’ll like movie X or not, she plays a 20 questions-like game with IMDB, asking questions like “Is X a romantic movie?”, “Does Johnny Depp star in X?”, and so on. She asks more informative questions first (i.e., she maximizes the information gain of each question), and gives you a yes/no answer at the end.&lt;/p&gt;
&lt;p&gt;Thus, Willow is a &lt;strong&gt;decision tree&lt;/strong&gt; for your movie preferences.&lt;/p&gt;
&lt;p&gt;But Willow is only human, so she doesn’t always generalize your preferences very well (i.e., she overfits). In order to get more accurate recommendations, you’d like to ask a bunch of your friends, and watch movie X if most of them say they think you’ll like it. That is, instead of asking only Willow, you want to ask Woody, Apple, and Cartman as well, and they vote on whether you’ll like a movie (i.e., you build an &lt;strong&gt;ensemble classifier&lt;/strong&gt;, aka a forest in this case).&lt;/p&gt;
&lt;p&gt;Now you don’t want each of your friends to do the same thing and give you the same answer, so you first give each of them slightly different data. After all, you’re not absolutely sure of your preferences yourself  you told Willow you loved Titanic, but maybe you were just happy that day because it was your birthday, so maybe some of your friends shouldn’t use the fact that you liked Titanic in making their recommendations. Or maybe you told her you loved Cinderella, but actually you really really loved it, so some of your friends should give Cinderella more weight. So instead of giving your friends the same data you gave Willow, you give them slightly perturbed versions. You don’t change your love/hate decisions, you just say you love/hate some movies a little more or less (formally, you give each of your friends a &lt;strong&gt;bootstrapped&lt;/strong&gt; version of your original training data). For example, whereas you told Willow that you liked Black Swan and Harry Potter and disliked Avatar, you tell Woody that you liked Black Swan so much you watched it twice, you disliked Avatar, and don’t mention Harry Potter at all.&lt;/p&gt;
&lt;p&gt;By using this ensemble, you hope that while each of your friends gives somewhat idiosyncratic recommendations (Willow thinks you like vampire movies more than you do, Woody thinks you like Pixar movies, and Cartman thinks you just hate everything), the errors get canceled out in the majority. Thus, your friends now form a &lt;strong&gt;bagged (bootstrap aggregated) forest&lt;/strong&gt; of your movie preferences.&lt;/p&gt;
&lt;p&gt;There’s still one problem with your data, however. While you loved both Titanic and Inception, it wasn’t because you like movies that star Leonardio DiCaprio. Maybe you liked both movies for other reasons. Thus, you don’t want your friends to all base their recommendations on whether Leo is in a movie or not. So when each friend asks IMDB a question, only a random subset of the possible questions is allowed (i.e., &lt;strong&gt;when you’re building a decision tree, at each node you use some randomness in selecting the attribute to split on&lt;/strong&gt;, say by randomly selecting an attribute or by selecting an attribute from a random subset). This means your friends aren’t allowed to ask whether Leonardo DiCaprio is in the movie whenever they want. So whereas previously you injected randomness at the data level, by perturbing your movie preferences slightly, now you’re injecting randomness at the model level, by making your friends ask different questions at different times.&lt;/p&gt;
&lt;p&gt;And so &lt;strong&gt;your friends now form a random forest&lt;/strong&gt;.&lt;/p&gt;</content><category term="data science"></category><category term="machine learning"></category></entry><entry><title>How to install Spark and use it from python via pyspark</title><link href="https://krinkere.github.io/krinkersite/install_spark.html" rel="alternate"></link><published>2018-04-11T08:22:00-04:00</published><updated>2018-04-11T08:22:00-04:00</updated><author><name>Al Krinker</name></author><id>tag:krinkere.github.io,2018-04-11:/krinkersite/install_spark.html</id><summary type="html">&lt;p&gt;How to install Spark on your Linux system, and use it from Python&lt;/p&gt;</summary><content type="html">&lt;ul&gt;
&lt;li&gt;Visit &lt;a href="http://spark.apache.org/downloads.html"&gt;Spark&lt;/a&gt; to download tgz version of spark with hadoop&lt;/li&gt;
&lt;li&gt;Unzip and move it to /opt directory&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ tar -xzf spark-2.3.0-bin-hadoop2.7.tgz
$ mv spark-2.3.0-bin-hadoop2.7 /opt/spark-2.3.0
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Create sym link&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ln -s /opt/spark-2.3.0 /opt/spark
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Add it to bash&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;export SPARK_HOME=/opt/spark
export PATH=$SPARK_HOME/bin:$PATH
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;At this point Spark is installed on your machine. Test it&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pyspark

Welcome to
      ____              __
     / __/__  ___ _____/ /__
    _&lt;span class="se"&gt;\ \/&lt;/span&gt; _ &lt;span class="se"&gt;\/&lt;/span&gt; _ &lt;span class="sb"&gt;`&lt;/span&gt;/ __/  &lt;span class="s1"&gt;&amp;#39;_/&lt;/span&gt;
&lt;span class="s1"&gt;   /__ / .__/\_,_/_/ /_/\_\   version 2.3.0&lt;/span&gt;
&lt;span class="s1"&gt;      /_/&lt;/span&gt;

&lt;span class="s1"&gt;Using Python version 3.6.4 (default, Jan 16 2018 18:10:19)&lt;/span&gt;
&lt;span class="s1"&gt;SparkSession available as &amp;#39;&lt;/span&gt;spark&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;.
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Connect it to your python scripts, by installing findspark to point python to the location of the Spark&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install findspark
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Install pyspark to be able to use Spark from python&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install pyspark
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Now you will be able to use Spark from your python scripts&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;findspark&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pyspark&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pyspark.sql&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;SQLContext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Row&lt;/span&gt;

&lt;span class="n"&gt;findspark&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;spark_home&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/opt/spark&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;conf&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pyspark&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SparkConf&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setAppName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tf_fraud&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;sc&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pyspark&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SparkContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;conf&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;sqlctx&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;SQLContext&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sc&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;connection_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;jdbc:oracle:thin:&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;@&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;:&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;SID&lt;/span&gt;

&lt;span class="n"&gt;df_pyspark&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sqlctx&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;jdbc&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;options&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;connection_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dbtable&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;employee&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;driver&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;oracle.jdbc.OracleDriver&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;load&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df_pyspark&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;printSchema&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;cad_ser_nums&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df_pyspark&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;foreach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="python"></category><category term="spark"></category><category term="pyspark"></category></entry><entry><title>How to connect to remote Oracle database from your python script</title><link href="https://krinkere.github.io/krinkersite/connect_to_oracle_via_python.html" rel="alternate"></link><published>2018-04-10T10:29:00-04:00</published><updated>2018-04-10T10:30:00-04:00</updated><author><name>Al Krinker</name></author><id>tag:krinkere.github.io,2018-04-10:/krinkersite/connect_to_oracle_via_python.html</id><summary type="html">&lt;p&gt;How to set up your Linux environment to be able to connect to remote Oracle database from local Python script&lt;/p&gt;</summary><content type="html">&lt;p&gt;Not sure if this step is needed since Oracle Instant Client suppose to be back compatible, but I went ahead and installed client that matched Oracle instance that I was trying to connect to
Determine Oracle version by running this command. Mine was 12.1.0.2.0&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;SELECT * FROM V$VERSION&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Download &lt;a href="http://www.oracle.com/technetwork/database/database-technologies/instant-client/overview/index.html"&gt;Oracle Instant Client&lt;/a&gt;.
I have Linux 86-64 so I used this &lt;a href="http://www.oracle.com/technetwork/topics/linuxx86-64soft-092277.html"&gt;link&lt;/a&gt; to download RPM version.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install downloaded oracle instant client&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo yum install oracle-instantclient12.1-basic-12.1.0.2.0-1.x86_64.rpm
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Add oracle instant client to your PATH. Permanently since I don't have any other Oracle products that might have broken.:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo sh -c &amp;quot;echo /usr/lib/oracle/12.1/client64/lib &amp;gt; /etc/ld.so.conf.d/oracle-instantclient.conf&amp;quot;
sudo ldconfig
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;At this point your environment is set. Now it is time to connect to it by installing cx_Oracle library in your python.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;python -m pip install cx_Oracle --upgrade
&lt;/pre&gt;&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;That should do it. Now write a simple python script to get the version of the Oracle database that you are trying to connect to.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;cx_Oracle&lt;/span&gt;
&lt;span class="n"&gt;ip&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;specify_ip_or_hostname&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;port&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;1234&lt;/span&gt;
&lt;span class="n"&gt;SID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;specify_sid_or_schema&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;dsn_tns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cx_Oracle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;makedsn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ip&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SID&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# You might get these via environment variable to make thing secure&lt;/span&gt;
&lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;conn&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;cx_Oracle&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;connect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dsn_tns&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;version&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;conn&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt;&amp;gt;&amp;gt; 12.1.0.2.0
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;References:&lt;br&gt;
&lt;a href="http://cx-oracle.readthedocs.io/en/latest/installation.html#oracle-instant-client-rpms"&gt;Installing cx_Oracle on Linux&lt;/a&gt;&lt;br&gt;
&lt;a href="http://cx-oracle.readthedocs.io/en/latest/installation.html#quick-start-cx-oracle-installation"&gt;Quick cx_Oracle Install&lt;/a&gt;&lt;/p&gt;</content><category term="python"></category><category term="oracle"></category></entry><entry><title>Mapping SQL to Pandas</title><link href="https://krinkere.github.io/krinkersite/mapping_sql_to_pandas.html" rel="alternate"></link><published>2018-04-03T13:15:00-04:00</published><updated>2018-04-03T13:46:00-04:00</updated><author><name>Al Krinker</name></author><id>tag:krinkere.github.io,2018-04-03:/krinkersite/mapping_sql_to_pandas.html</id><summary type="html">&lt;p&gt;Illustration of common SQL operations mapped to Pandas.&lt;/p&gt;</summary><content type="html">&lt;style&gt;
.table-borders td,
.table-borders th
{
    border: 1px solid black;
    padding: 10px;
}

span.bold-red {
    color: red;
    font-weight: bold;
}

&lt;/style&gt;

&lt;table class="table-borders"&gt;
    &lt;tr&gt;
            &lt;th bgcolor="gray"&gt;SQL&lt;/th&gt;
            &lt;th bgcolor="gray"&gt;Pandas&lt;/th&gt;
     &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;
                select&lt;br&gt;
                *&lt;br&gt;
                from table_name
             &lt;/td&gt;
            &lt;td&gt;df&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;
                select&lt;br&gt;
                *&lt;br&gt;
                from table_name&lt;br&gt;
                &lt;span class="bold-red"&gt;limit&lt;/span&gt; 3&lt;/td&gt;
            &lt;td&gt;df.head(3)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;
                select&lt;br&gt;
                col_name_1&lt;br&gt;
                from table_name&lt;br&gt;
                &lt;span class="bold-red"&gt;where&lt;/span&gt; col_name_2 = 'value'&lt;/td&gt;
            &lt;td&gt;df[df.col_name_2 == 'value'].col_name_1&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;
                select&lt;br&gt;
                &lt;span class="bold-red"&gt;distinct&lt;/span&gt; col_name_1&lt;br&gt;
                from table_name&lt;/td&gt;
            &lt;td&gt;df.col_name_1.unique()&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;
                select&lt;br&gt;
                *&lt;br&gt;
                 from table_name&lt;br&gt;
                 where col_name_1 = 'val_1' &lt;span class="bold-red"&gt;and&lt;/span&gt; col_name_2 = 'val_2'&lt;/td&gt;
            &lt;td&gt;df[(df.col_name_1 == 'val_1') &amp; (df.col_name_2 == 'val_2')]&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;select&lt;br&gt;
            col_name_1, col_name_3, col_name_3&lt;br&gt;
            from table_name&lt;br&gt;
            where col_name_4 = 'val_1' &lt;span class="bold-red"&gt;and&lt;/span&gt; col_name_5 = 'val_2'&lt;/td&gt;
            &lt;td&gt;df[(df.col_name_4 == 'val_1') &amp; (df.col_name_5 == 'val_2')][['col_name_1', 'col_name_2', 'col_name_3']]&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;select&lt;br&gt;
            *&lt;br&gt;
            from table_name&lt;br&gt;
            where col_name_1 = 'value'&lt;br&gt;
            &lt;span class="bold-red"&gt;order by&lt;/span&gt; col_name_2&lt;/td&gt;
            &lt;td&gt;df[df.col_name_1 == 'value'].sort_values('col_name_2')&lt;/td&gt;
        &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;select&lt;br&gt;
            *&lt;br&gt;
            from table_name&lt;br&gt;
            where col_name_1 = 'value'&lt;br&gt;
            &lt;span class="bold-red"&gt;order by&lt;/span&gt; col_name_2 &lt;span class="bold-red"&gt;desc&lt;/span&gt;&lt;/td&gt;
            &lt;td&gt;df[df.col_name_1 == 'value'].sort_values('col_name_2', ascending=False)&lt;/td&gt;
        &lt;/tr&gt;        
        &lt;tr&gt;
            &lt;td&gt;select&lt;br&gt;
            *&lt;br&gt;
            from table_name&lt;br&gt;
            where col_name &lt;span class="bold-red"&gt;in&lt;/span&gt; ('val_1', 'val_2')&lt;/td&gt;
            &lt;td&gt;df[df.col_name.isin(['val_1', 'val_2'])]&lt;/td&gt;
        &lt;/tr&gt;        
        &lt;tr&gt;
            &lt;td&gt;select&lt;br&gt;
            *&lt;br&gt;
            from table_name&lt;br&gt;
            where col_name &lt;span class="bold-red"&gt;not in&lt;/span&gt; ('val_1', 'val_2')&lt;/td&gt;
            &lt;td&gt;df[~df.col_name.isin(['val_1', 'val_2'])]&lt;/td&gt;
        &lt;/tr&gt;   
        &lt;tr&gt;
            &lt;td&gt;select&lt;br&gt;
            col_name_1, col_name_2, count(&amp;ast;)&lt;br&gt;
            from table_name&lt;br&gt;
            &lt;span class="bold-red"&gt;group by&lt;/span&gt; col_name_1, col_name_2&lt;br&gt;
            &lt;span class="bold-red"&gt;order by&lt;/span&gt; col_name_1, col_name_2&lt;/td&gt;
            &lt;td&gt;df.groupby(['col_name_1', 'col_name_2']).size()&lt;/td&gt;
        &lt;/tr&gt;         
        &lt;tr&gt;
            &lt;td&gt;select&lt;br&gt;
            col_name_1, col_name_2, count(&amp;ast;)&lt;br&gt;
            from table_name&lt;br&gt;
            &lt;span class="bold-red"&gt;group by&lt;/span&gt; col_name_1, col_name_2&lt;br&gt;
            &lt;span class="bold-red"&gt;order by&lt;/span&gt; col_name_1, count(&amp;ast;) desc&lt;/td&gt;
            &lt;td&gt;df.groupby(['col_name_1', 'col_name_2']).size().to_frame('size').reset_index().sort_values(['col_name_1', 'size'], ascending=[True, False])&lt;/td&gt;
        &lt;/tr&gt;      
        &lt;tr&gt;
            &lt;td&gt;select&lt;br&gt;
            col_name_1, count(&amp;ast;)&lt;br&gt;
            from table_name&lt;br&gt;
            where col_name_2 = 'val_1'&lt;br&gt;
            group by col_name_1&lt;br&gt;
            &lt;span class="bold-red"&gt;having&lt;/span&gt; count(&amp;ast;) &gt; 1000&lt;br&gt;
            order by count(&amp;ast;) desc&lt;/td&gt;
            &lt;td&gt;df[df.col_name_2 == 'val_1'].groupby('col_name_1').filter(lambda g: len(g) &gt; 1000).groupby('col_name_1').size().sort_values(ascending=False)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;select&lt;br&gt;
            col_name&lt;br&gt;
            from table_name&lt;br&gt;
            order by size&lt;br&gt;
            &lt;span class="bold-red"&gt;desc limit&lt;/span&gt; 10&lt;/td&gt;
            &lt;td&gt;df.nlargest(10, columns='col_name')&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;select&lt;br&gt;
            col_name&lt;br&gt;
            from table_name&lt;br&gt;
            order by size&lt;br&gt;
            &lt;span class="bold-red"&gt;desc limit&lt;/span&gt; 10
            &lt;span class="bold-red"&gt;offset 10&lt;/span&gt;&lt;/td&gt;
            &lt;td&gt;df.nlargest(&lt;span class="bold-red"&gt;20&lt;/span&gt;, columns='col_name').tail(10)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;select&lt;br&gt;
            &lt;span class="bold-red"&gt;max&lt;/span&gt;(col_name), &lt;span class="bold-red"&gt;min&lt;/span&gt;(col_name), &lt;span class="bold-red"&gt;mean&lt;/span&gt;(col_name), &lt;span class="bold-red"&gt;median&lt;/span&gt;(col_name)&lt;br&gt;
            from table_name&lt;/td&gt;
            &lt;td&gt;df.agg({'col_name': ['min', 'max', 'mean', 'median']})&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;select&lt;br&gt;
            col_name_1, col_name_2, col_name_3, col_name_4&lt;br&gt;
            from table_name_1&lt;br&gt;
            &lt;span class="bold-red"&gt;join&lt;/span&gt; table_name_2&lt;br&gt;
            on table_name_1.col_name_id_1 = table_name_2.col_name_id_2&lt;br&gt;
            where table_name_2.col_name = 'val'&lt;/td&gt;
            &lt;td&gt;df1.merge(df2[df2.col_name == 'val'][['col_name_id_2']], left_on='col_name_id_1', right_on='col_name_id_2', how='inner')[['col_name_1', 'col_name_2', 'col_name_3', 'col_name_4']]&lt;/td&gt;
        &lt;/tr&gt;        
        &lt;tr&gt;
            &lt;td&gt;
                &lt;span class="bold-red"&gt;create&lt;/span&gt; table table_name (col_name_1 integer, col_name_2 text);&lt;br&gt;
                &lt;span class="bold-red"&gt;insert&lt;/span&gt; into table_name values (1, 'val_1');&lt;br&gt;
                insert into table_name values (2, 'val_2');&lt;br&gt;
                insert into table_name values (3, 'val_3');
            &lt;/td&gt;
            &lt;td&gt;
                df1 = pd.DataFrame({'id': [1, 2], 'name': ['val_1', 'val_2']})&lt;br&gt;
                df2 = pd.DataFrame({'id': [3], 'name': ['val_3']})&lt;br&gt;
                pd.concat([df1, df2]).reset_index(drop=True)
            &lt;/td&gt;
        &lt;/tr&gt;        
        &lt;tr&gt;
            &lt;td&gt;&lt;span class="bold-red"&gt;update&lt;/span&gt;&lt;br&gt;
            table_name&lt;br&gt;
            set col_name_1 = 'val_1'&lt;br&gt;
            where col_name_2 == 'val_2'&lt;/td&gt;
            &lt;td&gt;df.loc[df['col_name_2'] == 'val_2', 'col_name_1'] = 'val_1'&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;&lt;span class="bold-red"&gt;delete&lt;/span&gt;&lt;br&gt;
            from table_name&lt;br&gt;
            where col_name = 'val'&lt;/td&gt;
            &lt;td&gt;
                df = df[df.col_name != 'val'&lt;br&gt;
                df.drop(df[df.col_name == 'val'].index)
            &lt;/td&gt;
        &lt;/tr&gt;
&lt;/table&gt;</content><category term="python"></category><category term="pandas"></category></entry><entry><title>How to remove typos from entity names via fuzzywuzzy module in python.</title><link href="https://krinkere.github.io/krinkersite/fix_spelling_errors.html" rel="alternate"></link><published>2018-03-30T11:44:00-04:00</published><updated>2018-03-30T11:44:00-04:00</updated><author><name>Al Krinker</name></author><id>tag:krinkere.github.io,2018-03-30:/krinkersite/fix_spelling_errors.html</id><summary type="html">&lt;p&gt;Remove typos by leveraging fuzzywuzzy module in python&lt;/p&gt;</summary><content type="html">&lt;p&gt;While cleaning data in csv file, it is often common to see entity name such 
as city, person name, organization, etc being misspelled a little slightly and 
hence not producing same type of statistic as you might want. For example, 
let's say that you try to collect stats on number of times user accessed your page.
In that user name can be entered manually or it provided by different systems, 
then it might be different slight. Here I mean that we need to ensure that
case is the same not to throw our stats and any spaces are cleaned as well
just as a prelim step. Also, the username might be slightly misspelled with an
extra dash, space or single character. Here lays the danger though, there
can we two usernames that vary just by a character. I remember the days of hotmail
and that you would often get emails sent to blackwolf to your black.wolf account.
Gmail saw this as a problem and now it ignores periods in the emails to avoid this
issue. What I am trying to say is that you need to use typos with care. Now how you do it?&lt;/p&gt;
&lt;p&gt;First of all, clean the text from spaces and make it lowercased.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="kn"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;

&lt;span class="c1"&gt;# read in our dataset&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;my_data.csv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# convert to lower case&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;lower&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="c1"&gt;# remove trailing white spaces&lt;/span&gt;
&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# let&amp;#39;s take a look at list of unique usernames values&lt;/span&gt;
&lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unique&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# sort them alphabetically and then take a closer look&lt;/span&gt;
&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We should see some usernames that seem too close of a match... let's 
try to find all usernames that are more that 90% close to each other 
and replace them to the most common name&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;fuzzywuzzy&lt;/span&gt;

&lt;span class="c1"&gt;# function to replace rows in the provided column of the provided dataframe&lt;/span&gt;
&lt;span class="c1"&gt;# that match the provided string above the provided ratio with the provided string&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;replace_matches_in_column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string_to_match&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;min_ratio&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;90&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# get a list of unique strings&lt;/span&gt;
    &lt;span class="n"&gt;strings&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;unique&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

    &lt;span class="c1"&gt;# get the top 10 closest matches to our input string&lt;/span&gt;
    &lt;span class="n"&gt;matches&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;fuzzywuzzy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;process&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string_to_match&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                                         &lt;span class="n"&gt;limit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;scorer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;fuzzywuzzy&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fuzz&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;token_sort_ratio&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# only get matches with a ratio &amp;gt; 90&lt;/span&gt;
    &lt;span class="n"&gt;close_matches&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;matches&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;matches&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;matches&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="n"&gt;min_ratio&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="c1"&gt;# get the rows of all the close matches in our dataframe&lt;/span&gt;
    &lt;span class="n"&gt;rows_with_matches&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;isin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;close_matches&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# replace all rows with close matches with the input matches &lt;/span&gt;
    &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;loc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;rows_with_matches&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;string_to_match&lt;/span&gt;

    &lt;span class="c1"&gt;# let us know the function&amp;#39;s done&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;All done!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now you can call it as such&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# use the function we just wrote to replace close matches to &amp;quot;d.i khan&amp;quot; with &amp;quot;d.i khan&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;replace_matches_in_column&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;column&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;username&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string_to_match&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;black.wolf&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All done!&lt;/p&gt;</content><category term="python"></category></entry><entry><title>How to detect encoding of CSV file in python</title><link href="https://krinkere.github.io/krinkersite/encoding_csv_file_python.html" rel="alternate"></link><published>2018-03-30T09:27:00-04:00</published><updated>2018-03-30T09:27:00-04:00</updated><author><name>Al Krinker</name></author><id>tag:krinkere.github.io,2018-03-30:/krinkersite/encoding_csv_file_python.html</id><summary type="html">&lt;p&gt;How to read CSV file in python and detect its encoding&lt;/p&gt;</summary><content type="html">&lt;p&gt;In my line of work, I have to deal with a lot of spreadsheets coming 
my way with different type of data. I don't control these csv files, hence
I never know how they are being generated. If I were to simply read
the file, I would often get something like that.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;UnicodeDecodeError Traceback (most recent call last)
    pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader._convert_tokens()
    pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader._convert_with_dtype()
    pandas/_libs/parsers.pyx in pandas._libs.parsers.TextReader._string_convert()
    pandas/_libs/parsers.pyx in pandas._libs.parsers._string_box_utf8()

UnicodeDecodeError: &amp;#39;utf-8&amp;#39; codec can&amp;#39;t decode byte 0x99 in position 11: invalid start byte
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Basically, when you specify the following, you assume that the information
was encoded in UTF-8 ()default) format &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;my_data.csv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;However, if that's not the case and format is not UTF-8 then you get a nasty error 
shown previously. What to do? Try manually some common encoders, or look at the file
and try to figure it out? &lt;br/&gt;
A much better way is to use chardet module to do it for you. Here we going to 
read first ten thousand bytes to figure out the encoding type. Note that chardet
is not 100% accurate and you would actually see the level of confidence of 
encoder detection as part of chardet output. But it is still better than guessing manually.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# look at the first ten thousand bytes to guess the character encoding&lt;/span&gt;
&lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;my_data.csv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;rawdata&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;chardet&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;detect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;rawdata&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;10000&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

&lt;span class="c1"&gt;# check what the character encoding might be&lt;/span&gt;
&lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The result is&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;{&amp;#39;encoding&amp;#39;: &amp;#39;Windows-1252&amp;#39;, &amp;#39;confidence&amp;#39;: 0.73, &amp;#39;language&amp;#39;: &amp;#39;&amp;#39;}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So chardet is 73% confidence that the right encoding is "Windows-1252".  Now we can use
this data to specify encoding type as we trying to read the file&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read_csv&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;my_data.csv&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Windows-1252&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;No errors! &lt;/p&gt;</content><category term="python"></category></entry><entry><title>Commit your changes or stash them before you can merge??!?!</title><link href="https://krinkere.github.io/krinkersite/Commit_your_changes_or_stash_them_before_you_can_merge.html" rel="alternate"></link><published>2018-03-09T07:54:00-05:00</published><updated>2018-03-09T08:17:00-05:00</updated><author><name>Al Krinker</name></author><id>tag:krinkere.github.io,2018-03-09:/krinkersite/Commit_your_changes_or_stash_them_before_you_can_merge.html</id><summary type="html">&lt;p&gt;What to do when you are faced with 'Please, commit your changes or stash them before you can merge.' message from git as you are trying to get latest code off your remote repository&lt;/p&gt;</summary><content type="html">&lt;p&gt;When trying to update your local copy from remote master copy, you will see following error&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; git pull origin master
&lt;span class="go"&gt;error: Your local changes to the following files would be overwritten by merge:&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;list of files&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;Please commit your changes or stash them before you merge.&lt;/span&gt;
&lt;span class="go"&gt;Aborting&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You have several options here&lt;/p&gt;
&lt;h3&gt;Commit the change&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; git add .
&lt;span class="gp"&gt;$&lt;/span&gt; git commit -m &lt;span class="s2"&gt;&amp;quot;committing before the update&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Stash them&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; git stash
&lt;span class="gp"&gt;$&lt;/span&gt; git stash pop
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Overwrite local changes&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;git reset --hard&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="git"></category></entry><entry><title>How to check in a folder, but ignore its contents</title><link href="https://krinkere.github.io/krinkersite/check_in_folder_ignore_contents.html" rel="alternate"></link><published>2016-09-08T10:52:00-04:00</published><updated>2018-03-16T14:08:00-04:00</updated><author><name>Al Krinker</name></author><id>tag:krinkere.github.io,2016-09-08:/krinkersite/check_in_folder_ignore_contents.html</id><summary type="html">&lt;p&gt;Check in folder into git, but ignore any contents in it (massive logs, models, etc)&lt;/p&gt;</summary><content type="html">&lt;p&gt;Git does not let you to check in an empty folder, even if you are using it as a temp output location. How to work around it?&lt;/p&gt;
&lt;p&gt;In the folder that you are trying to commit, create &lt;b&gt;.gitignore&lt;/b&gt; file and add following content&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;ast;&lt;br/&gt;
&amp;ast;/&lt;br/&gt;
!.gitignore&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;then add it to the git&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; git add .gitignore
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &amp;ast; line tells git to ignore all files in the folder, but !.gitignore tells git to still include the .gitignore file. This way, your local repository and any other clones of the repository all get both the empty folder and the .gitignore it needs.
May be obvious but also add &amp;ast;/ to the git ignore to also ignore sub folders.&lt;/p&gt;</content><category term="git"></category></entry><entry><title>How to back off back to the earlier version of the code</title><link href="https://krinkere.github.io/krinkersite/back_it_off.html" rel="alternate"></link><published>2016-07-29T11:44:00-04:00</published><updated>2018-03-16T15:00:00-04:00</updated><author><name>Al Krinker</name></author><id>tag:krinkere.github.io,2016-07-29:/krinkersite/back_it_off.html</id><summary type="html">&lt;p&gt;How to get back to previous good commit&lt;/p&gt;</summary><content type="html">&lt;p&gt;Say you are developing a new feature and you realize after few commits that you went off to a way different route that you suppose to and you need to back it up few commits and start over... this definitely would be a cleaner way vs trying to remove what was done manually. How to do it though?&lt;/p&gt;
&lt;p&gt;Check out what you want and get rid of all that code...&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; git reset --hard 0d3b7ac32
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then you would push it up&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; git push origin +master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Pretty simple once you know it.&lt;/p&gt;</content><category term="git"></category></entry><entry><title>How to remove files added to git</title><link href="https://krinkere.github.io/krinkersite/How_to_remove_files_added_to_git.html" rel="alternate"></link><published>2016-03-07T21:34:00-05:00</published><updated>2018-03-16T13:51:00-04:00</updated><author><name>Al Krinker</name></author><id>tag:krinkere.github.io,2016-03-07:/krinkersite/How_to_remove_files_added_to_git.html</id><summary type="html">&lt;p&gt;How to remove files added to git via git add . command&lt;/p&gt;</summary><content type="html">&lt;p&gt;Imagine the situation where you wrote your code and then decided to add it to your git repo. Pretty easy right?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; git init
&lt;span class="gp"&gt;$&lt;/span&gt; git add .
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Before you commit, you want to see what's going to be committed. So you do&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; git status
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now you see whole bunch of config and target files that have no business being in the repo. Not a problem, you can use .gitignore right? First remove what you added, create .gitignore file and you can re add again only source files.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; git rm -r .
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;create .gitignore with&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;/target/&amp;ast;&amp;ast;&lt;br/&gt;
.settings/&amp;ast;&amp;ast;&lt;br/&gt;
.classpath&lt;br/&gt;
.project&lt;br/&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;and re-add&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; git add .
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Check what's about to be committed... and what?!?!? old files? How can this be? Did I messed up my regex? spelled gitignore wrong or forgot the leading period? Nope, everything seems correct...&lt;/p&gt;
&lt;p&gt;After reading gitignore help guide... you need to clear your cache!!! Here is what you do&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; git rm -r --cached .
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;cached flag is the key difference.&lt;/p&gt;
&lt;p&gt;After this command, re-add, verify and finally commit:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; git add .
&lt;span class="gp"&gt;$&lt;/span&gt; git commit -m &lt;span class="s2"&gt;&amp;quot;source files only!!!&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="git"></category></entry><entry><title>Accessing wired Windows printer from your Mac</title><link href="https://krinkere.github.io/krinkersite/Accessing_wired_Windows_printer_from_your_Mac.html" rel="alternate"></link><published>2015-12-20T12:52:00-05:00</published><updated>2018-03-15T15:46:00-04:00</updated><author><name>Al Krinker</name></author><id>tag:krinkere.github.io,2015-12-20:/krinkersite/Accessing_wired_Windows_printer_from_your_Mac.html</id><summary type="html">&lt;p&gt;What to do when you are faced with 'Please, commit your changes or stash them before you can merge.' message from git as you are trying to get latest code off your remote repository&lt;/p&gt;</summary><content type="html">&lt;p&gt;Before my PC seized to be, I used to have old wired printer that did the job... the only problem was that I already have few Apple laptops and I wanted to be able to print from them (The problem is easily solved by buying wireless printer that supports AirPrint, i.e. even print from your iPhone!).&lt;/p&gt;
&lt;p&gt;Anyway, if you have wired Windows printer and don't want to upgrade just yet here is what you need to do:&lt;/p&gt;
&lt;p&gt;On Windows PC&lt;br /&gt;
1. Establish user account on your PC. This was one thing that I had to do to make everything that should work to actually work. This is as easy as opening your control panel and clicking on Add user in your Users menu. For more tricks see this: http://www.howtogeek.com/howto/10325/manage-user-accounts-in-windows-home-server/&lt;br /&gt;
2. Now onto actual set up... Select Start-&amp;gt;Devices and Printers. Right click on the printer that you want to share, and either pick share or properties and then pick sharing tab. Make sure that share check box is selected and make sure that you note down the name of the printer.&lt;br /&gt;
3. Open command prompt. Use ipconfig command to find your PC's IP.&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;To summarize this part. You have IP address and name of the printer to connect to and you have the credentials that you created in step 1.&lt;/p&gt;
&lt;p&gt;On MAC&lt;br /&gt;
1. Open System Preferences and locate Printers and Scanners icon. Click!&lt;br /&gt;
2. Select + under printers to add new printer, i.e. wired Windows printer.&lt;br /&gt;
3. Right click on the menu and select Customize Toolbar and add Advanced&lt;br /&gt;
4. Click on Advanced. For type select Windows printer via spoolss&lt;br /&gt;
5. For URL provide IP and printer name that you have... so the link looks like smb://192.138.1.13/printer_name (Replace any spaces with %20 in your&lt;br /&gt;
6. Under Choose a driver or Printer Model pick your printer type (I did not see my exact model so I picked closes HP model instead. Worked)&lt;br /&gt;
7. At this point your PC printer will be connected to your Mac.&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;Testing&lt;br /&gt;
Select something to print on your Mac... in my case, the first time it tried to print it asked for my PC username/password which we created previously, after that it was stored in my keychain and was never an issue again.&lt;/p&gt;
&lt;p&gt;That's it! Hope it helps and once again, let me know if you have further questions, etc.&lt;/p&gt;</content><category term="hardware"></category><category term="mac"></category></entry><entry><title>Lucene scoring examplained</title><link href="https://krinkere.github.io/krinkersite/Lucene_scoring_examplained.html" rel="alternate"></link><published>2015-04-30T19:48:00-04:00</published><updated>2018-03-15T12:30:00-04:00</updated><author><name>Al Krinker</name></author><id>tag:krinkere.github.io,2015-04-30:/krinkersite/Lucene_scoring_examplained.html</id><summary type="html">&lt;p&gt;Overview of Lucene scoring&lt;/p&gt;</summary><content type="html">&lt;p&gt;Several good books already explain what Lucene scoring really means and how it is calculated in great detail with lots of basic concepts explain.
In this, post I am going to try to keep it high level for people already familiar with the basics and go straight for the scoring overview.&lt;/p&gt;
&lt;p&gt;The factors involved in Lucene's scoring algorithm are as follows:&lt;br /&gt;
1. tf = term frequency in document = measure of how often a term appears in the document&lt;br /&gt;
2. idf = inverse document frequency = measure of how often the term appears across the index&lt;br /&gt;
3. coord = number of terms in the query that were found in the document&lt;br /&gt;
4. lengthNorm = measure of the importance of a term according to the total number of terms in the field&lt;br /&gt;
5. queryNorm = normalization factor so that queries can be compared&lt;br /&gt;
6. boost (index) = boost of the field at index-time&lt;br /&gt;
7. boost (query) = boost of the field at query-time&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;The implementation, implication and rationales of factors 1,2, 3 and 4 in DefaultSimilarity.java, which is what you get if you don't explicitly specify a similarity, are:
note: the implication of these factors should be read as, "Everything else being equal, … "&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;tf&lt;br /&gt;
Implementation: sqrt(freq)&lt;br /&gt;
Implication: the more frequent a term occurs in a document, the greater its score&lt;br /&gt;
Rationale: documents which contains more of a term are generally more relevant&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;idf&lt;br /&gt;
Implementation: log(numDocs/(docFreq+1)) + 1&lt;br /&gt;
Implication: the greater the occurrence of a term in different documents, the lower its score&lt;br /&gt;
Rationale: common terms are less important than uncommon ones&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;coord&lt;br /&gt;
Implementation: overlap / maxOverlap&lt;br /&gt;
Implication: of the terms in the query, a document that contains more terms will have a higher score&lt;br /&gt;
Rationale: self-explanatory&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;lengthNorm&lt;br /&gt;
Implementation: 1/sqrt(numTerms)&lt;br /&gt;
Implication: a term matched in fields with less terms have a higher score&lt;br /&gt;
Rationale: a term in a field with less terms is more important than one with more&lt;br /&gt;
queryNorm is not related to the relevance of the document, but rather tries to make scores between different queries comparable. It is implemented as 1/sqrt(sumOfSquaredWeights)&lt;br /&gt;
So, roughly speaking (quoting Mark Harwood from the mailing list),&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Documents containing all the search terms are good&lt;/li&gt;
&lt;li&gt;Matches on rare words are better than for common words&lt;/li&gt;
&lt;li&gt;Long documents are not as good as short ones&lt;/li&gt;
&lt;li&gt;Documents which mention the search terms many times are good&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The mathematical definition of the scoring can be found in &lt;a href="https://lucene.apache.org/core/2_9_4/api/all/org/apache/lucene/search/Similarity.html"&gt;org.apache.lucene.search.Class Similarity&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Customizing scoring&lt;/h3&gt;
&lt;p&gt;Its easy to customize the scoring algorithm. Just subclass DefaultSimilarity and override the method you want to customize.
For example, if you want to ignore how common a term appears across the index,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Similarity&lt;/span&gt; &lt;span class="n"&gt;sim&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;DefaultSimilarity&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="nf"&gt;idf&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and if you think for the title field, more terms is better&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Similarity&lt;/span&gt; &lt;span class="n"&gt;sim&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;DefaultSimilarity&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="nf"&gt;lengthNorm&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;numTerms&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;log&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numTerms&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;lengthNorm&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numTerms&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="lucene"></category><category term="search"></category></entry><entry><title>How to find a file containing particular text in Linux</title><link href="https://krinkere.github.io/krinkersite/How_to_find_a_file_containing_particular_text_in_Linux.html" rel="alternate"></link><published>2014-05-27T10:41:00-04:00</published><updated>2014-05-27T10:42:00-04:00</updated><author><name>Al Krinker</name></author><id>tag:krinkere.github.io,2014-05-27:/krinkersite/How_to_find_a_file_containing_particular_text_in_Linux.html</id><summary type="html">&lt;p&gt;Use grep to find file containing particular text.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here is a quick example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; grep -r &lt;span class="s2"&gt;&amp;quot;text string to search” directory-path&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To search for a string ‘logged in’ in all text (*.log) files located in /etc/networks/ directory for example, use:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; grep &lt;span class="s2"&gt;&amp;quot;logged in&amp;quot;&lt;/span&gt; /etc/networks/*.log
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To search all subdirectories recursively, include -r option like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; grep -r &lt;span class="s2"&gt;&amp;quot;logged in&amp;quot;&lt;/span&gt; /etc/networks/*.log
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The grep command prints the matching lines for each match. Pass -H option to print the filename only:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; grep -H -r &lt;span class="s2"&gt;&amp;quot;logged in&amp;quot;&lt;/span&gt; /etc/networks/*.log
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To search for two or more words, use egrep:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;egrep -w -r &amp;#39;logged in|logged out&amp;#39; /etc/networks/*.log&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To hide warning spam of permission for certain directories being denied, etc, send them to dev/null:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; grep -w -r &lt;span class="s1"&gt;&amp;#39;logged in|logged out&amp;#39;&lt;/span&gt; /etc/networks/*.log &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;/dev/null
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To make it case insensitive, use -i option:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; grep -i &lt;span class="s2"&gt;&amp;quot;logged in&amp;quot;&lt;/span&gt; /etc/networks/*.log
&lt;/pre&gt;&lt;/div&gt;</content><category term="linux"></category></entry></feed>