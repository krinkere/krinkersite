<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Cloud. Big Data. Analytics... and so on - How To article</title><link href="https://krinkere.github.io/krinkersite/" rel="alternate"></link><link href="https://krinkere.github.io/krinkersite/feeds/how-to-article.atom.xml" rel="self"></link><id>https://krinkere.github.io/krinkersite/</id><updated>2018-03-16T13:51:00-04:00</updated><entry><title>Commit your changes or stash them before you can merge??!?!</title><link href="https://krinkere.github.io/krinkersite/Commit_your_changes_or_stash_them_before_you_can_merge.html" rel="alternate"></link><published>2018-03-09T07:54:00-05:00</published><updated>2018-03-09T08:17:00-05:00</updated><author><name>Al Krinker</name></author><id>tag:krinkere.github.io,2018-03-09:/krinkersite/Commit_your_changes_or_stash_them_before_you_can_merge.html</id><summary type="html">&lt;p&gt;What to do when you are faced with 'Please, commit your changes or stash them before you can merge.' message from git as you are trying to get latest code off your remote repository&lt;/p&gt;</summary><content type="html">&lt;p&gt;When trying to update your local copy from remote master copy, you will see following error&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; git pull origin master
&lt;span class="go"&gt;error: Your local changes to the following files would be overwritten by merge:&lt;/span&gt;
&lt;span class="go"&gt;&amp;lt;list of files&amp;gt;&lt;/span&gt;
&lt;span class="go"&gt;Please commit your changes or stash them before you merge.&lt;/span&gt;
&lt;span class="go"&gt;Aborting&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You have several options here&lt;/p&gt;
&lt;h3&gt;Commit the change&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; git add .
&lt;span class="gp"&gt;$&lt;/span&gt; git commit -m &lt;span class="s2"&gt;&amp;quot;committing before the update&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Stash them&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; git stash
&lt;span class="gp"&gt;$&lt;/span&gt; git stash pop
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Overwrite local changes&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;git reset --hard&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="git"></category></entry><entry><title>How to remove files added to git</title><link href="https://krinkere.github.io/krinkersite/How_to_remove_files_added_to_git.html" rel="alternate"></link><published>2016-03-07T21:34:00-05:00</published><updated>2018-03-16T13:51:00-04:00</updated><author><name>Al Krinker</name></author><id>tag:krinkere.github.io,2016-03-07:/krinkersite/How_to_remove_files_added_to_git.html</id><summary type="html">&lt;p&gt;How to remove files added to git via git add . command&lt;/p&gt;</summary><content type="html">&lt;p&gt;Imagine the situation where you wrote your code and then decided to add it to your git repo. Pretty easy right?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; git init
&lt;span class="gp"&gt;$&lt;/span&gt; git add .
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Before you commit, you want to see what's going to be committed. So you do&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; git status
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now you see whole bunch of config and target files that have no business being in the repo. Not a problem, you can use .gitignore right? First remove what you added, create .gitignore file and you can re add again only source files.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; git rm -r .
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;create .gitignore with&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;/target/&amp;ast;&amp;ast;&lt;br/&gt;
.settings/&amp;ast;&amp;ast;&lt;br/&gt;
.classpath&lt;br/&gt;
.project&lt;br/&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;and re-add&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; git add .
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Check what's about to be committed... and what?!?!? old files? How can this be? Did I messed up my regex? spelled gitignore wrong or forgot the leading period? Nope, everything seems correct...&lt;/p&gt;
&lt;p&gt;After reading gitignore help guide... you need to clear your cache!!! Here is what you do&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; git rm -r --cached .
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;cached flag is the key difference.&lt;/p&gt;
&lt;p&gt;After this command, re-add, verify and finally commit:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; git add .
&lt;span class="gp"&gt;$&lt;/span&gt; git commit -m &lt;span class="s2"&gt;&amp;quot;source files only!!!&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="git"></category></entry><entry><title>How to find a file containing particular text in Linux</title><link href="https://krinkere.github.io/krinkersite/How_to_find_a_file_containing_particular_text_in_Linux.html" rel="alternate"></link><published>2014-05-27T10:41:00-04:00</published><updated>2014-05-27T10:42:00-04:00</updated><author><name>Al Krinker</name></author><id>tag:krinkere.github.io,2014-05-27:/krinkersite/How_to_find_a_file_containing_particular_text_in_Linux.html</id><summary type="html">&lt;p&gt;Use grep to find file containing particular text.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Here is a quick example:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; grep -r &lt;span class="s2"&gt;&amp;quot;text string to search” directory-path&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To search for a string ‘logged in’ in all text (*.log) files located in /etc/networks/ directory for example, use:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; grep &lt;span class="s2"&gt;&amp;quot;logged in&amp;quot;&lt;/span&gt; /etc/networks/*.log
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To search all subdirectories recursively, include -r option like so:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; grep -r &lt;span class="s2"&gt;&amp;quot;logged in&amp;quot;&lt;/span&gt; /etc/networks/*.log
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The grep command prints the matching lines for each match. Pass -H option to print the filename only:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; grep -H -r &lt;span class="s2"&gt;&amp;quot;logged in&amp;quot;&lt;/span&gt; /etc/networks/*.log
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To search for two or more words, use egrep:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="go"&gt;egrep -w -r &amp;#39;logged in|logged out&amp;#39; /etc/networks/*.log&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To hide warning spam of permission for certain directories being denied, etc, send them to dev/null:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; grep -w -r &lt;span class="s1"&gt;&amp;#39;logged in|logged out&amp;#39;&lt;/span&gt; /etc/networks/*.log &lt;span class="m"&gt;2&lt;/span&gt;&amp;gt;/dev/null
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;To make it case insensitive, use -i option:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="gp"&gt;$&lt;/span&gt; grep -i &lt;span class="s2"&gt;&amp;quot;logged in&amp;quot;&lt;/span&gt; /etc/networks/*.log
&lt;/pre&gt;&lt;/div&gt;</content><category term="linux"></category></entry></feed>