<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Cloud. Big Data. Analytics... and so on - Tutorial</title><link href="https://krinkere.github.io/krinkersite/" rel="alternate"></link><link href="https://krinkere.github.io/krinkersite/feeds/tutorial.atom.xml" rel="self"></link><id>https://krinkere.github.io/krinkersite/</id><updated>2018-03-15T12:30:00-04:00</updated><entry><title>Lucene scoring examplained</title><link href="https://krinkere.github.io/krinkersite/Lucene_scoring_examplained.html" rel="alternate"></link><published>2015-04-30T19:48:00-04:00</published><updated>2018-03-15T12:30:00-04:00</updated><author><name>Al Krinker</name></author><id>tag:krinkere.github.io,2015-04-30:/krinkersite/Lucene_scoring_examplained.html</id><summary type="html">&lt;p&gt;Overview of Lucene scoring&lt;/p&gt;</summary><content type="html">&lt;p&gt;Several good books already explain what Lucene scoring really means and how it is calculated in great detail with lots of basic concepts explain.
In this, post I am going to try to keep it high level for people already familiar with the basics and go straight for the scoring overview.&lt;/p&gt;
&lt;p&gt;The factors involved in Lucene's scoring algorithm are as follows:&lt;br /&gt;
1. tf = term frequency in document = measure of how often a term appears in the document&lt;br /&gt;
2. idf = inverse document frequency = measure of how often the term appears across the index&lt;br /&gt;
3. coord = number of terms in the query that were found in the document&lt;br /&gt;
4. lengthNorm = measure of the importance of a term according to the total number of terms in the field&lt;br /&gt;
5. queryNorm = normalization factor so that queries can be compared&lt;br /&gt;
6. boost (index) = boost of the field at index-time&lt;br /&gt;
7. boost (query) = boost of the field at query-time&lt;br /&gt;&lt;/p&gt;
&lt;p&gt;The implementation, implication and rationales of factors 1,2, 3 and 4 in DefaultSimilarity.java, which is what you get if you don't explicitly specify a similarity, are:
note: the implication of these factors should be read as, "Everything else being equal, â€¦ "&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;tf&lt;br /&gt;
Implementation: sqrt(freq)&lt;br /&gt;
Implication: the more frequent a term occurs in a document, the greater its score&lt;br /&gt;
Rationale: documents which contains more of a term are generally more relevant&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;idf&lt;br /&gt;
Implementation: log(numDocs/(docFreq+1)) + 1&lt;br /&gt;
Implication: the greater the occurrence of a term in different documents, the lower its score&lt;br /&gt;
Rationale: common terms are less important than uncommon ones&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;coord&lt;br /&gt;
Implementation: overlap / maxOverlap&lt;br /&gt;
Implication: of the terms in the query, a document that contains more terms will have a higher score&lt;br /&gt;
Rationale: self-explanatory&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;lengthNorm&lt;br /&gt;
Implementation: 1/sqrt(numTerms)&lt;br /&gt;
Implication: a term matched in fields with less terms have a higher score&lt;br /&gt;
Rationale: a term in a field with less terms is more important than one with more&lt;br /&gt;
queryNorm is not related to the relevance of the document, but rather tries to make scores between different queries comparable. It is implemented as 1/sqrt(sumOfSquaredWeights)&lt;br /&gt;
So, roughly speaking (quoting Mark Harwood from the mailing list),&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Documents containing all the search terms are good&lt;/li&gt;
&lt;li&gt;Matches on rare words are better than for common words&lt;/li&gt;
&lt;li&gt;Long documents are not as good as short ones&lt;/li&gt;
&lt;li&gt;Documents which mention the search terms many times are good&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The mathematical definition of the scoring can be found in &lt;a href="https://lucene.apache.org/core/2_9_4/api/all/org/apache/lucene/search/Similarity.html"&gt;org.apache.lucene.search.Class Similarity&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Customizing scoring&lt;/h3&gt;
&lt;p&gt;Its easy to customize the scoring algorithm. Just subclass DefaultSimilarity and override the method you want to customize.
For example, if you want to ignore how common a term appears across the index,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Similarity&lt;/span&gt; &lt;span class="n"&gt;sim&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;DefaultSimilarity&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="nf"&gt;idf&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i1&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and if you think for the title field, more terms is better&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Similarity&lt;/span&gt; &lt;span class="n"&gt;sim&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;DefaultSimilarity&lt;/span&gt;&lt;span class="o"&gt;()&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
  &lt;span class="kd"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="nf"&gt;lengthNorm&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;numTerms&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;equals&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;))&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;Math&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;log&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;numTerms&lt;/span&gt;&lt;span class="o"&gt;));&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kd"&gt;super&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;lengthNorm&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="n"&gt;numTerms&lt;/span&gt;&lt;span class="o"&gt;);&lt;/span&gt;
  &lt;span class="o"&gt;}&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="lucene"></category><category term="search"></category></entry></feed>