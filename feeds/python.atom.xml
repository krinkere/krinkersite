<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Cloud. Big Data. Analytics... and so on - Python</title><link href="https://krinkere.github.io/krinkersite/" rel="alternate"></link><link href="https://krinkere.github.io/krinkersite/feeds/python.atom.xml" rel="self"></link><id>https://krinkere.github.io/krinkersite/</id><updated>2018-04-03T13:46:00-04:00</updated><entry><title>Mapping SQL to Pandas</title><link href="https://krinkere.github.io/krinkersite/mapping_sql_to_pandas.html" rel="alternate"></link><published>2018-04-03T13:15:00-04:00</published><updated>2018-04-03T13:46:00-04:00</updated><author><name>Al Krinker</name></author><id>tag:krinkere.github.io,2018-04-03:/krinkersite/mapping_sql_to_pandas.html</id><summary type="html">&lt;p&gt;Illustration of common SQL operations mapped to Pandas.&lt;/p&gt;</summary><content type="html">&lt;style&gt;
.table-borders td,
.table-borders th
{
    border: 1px solid black;
    padding: 10px;
}

span.bold-red {
    color: red;
    font-weight: bold;
}

&lt;/style&gt;

&lt;table class="table-borders"&gt;
    &lt;tr&gt;
            &lt;th bgcolor="gray"&gt;SQL&lt;/th&gt;
            &lt;th bgcolor="gray"&gt;Pandas&lt;/th&gt;
     &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;
                select&lt;br&gt;
                *&lt;br&gt;
                from table_name
             &lt;/td&gt;
            &lt;td&gt;df&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;
                select&lt;br&gt;
                *&lt;br&gt;
                from table_name&lt;br&gt;
                &lt;span class="bold-red"&gt;limit&lt;/span&gt; 3&lt;/td&gt;
            &lt;td&gt;df.head(3)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;
                select&lt;br&gt;
                col_name_1&lt;br&gt;
                from table_name&lt;br&gt;
                &lt;span class="bold-red"&gt;where&lt;/span&gt; col_name_2 = 'value'&lt;/td&gt;
            &lt;td&gt;df[df.col_name_2 == 'value'].col_name_1&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;
                select&lt;br&gt;
                &lt;span class="bold-red"&gt;distinct&lt;/span&gt; col_name_1&lt;br&gt;
                from table_name&lt;/td&gt;
            &lt;td&gt;df.col_name_1.unique()&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;
                select&lt;br&gt;
                *&lt;br&gt;
                 from table_name&lt;br&gt;
                 where col_name_1 = 'val_1' &lt;span class="bold-red"&gt;and&lt;/span&gt; col_name_2 = 'val_2'&lt;/td&gt;
            &lt;td&gt;df[(df.col_name_1 == 'val_1') &amp; (df.col_name_2 == 'val_2')]&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;select&lt;br&gt;
            col_name_1, col_name_3, col_name_3&lt;br&gt;
            from table_name&lt;br&gt;
            where col_name_4 = 'val_1' &lt;span class="bold-red"&gt;and&lt;/span&gt; col_name_5 = 'val_2'&lt;/td&gt;
            &lt;td&gt;df[(df.col_name_4 == 'val_1') &amp; (df.col_name_5 == 'val_2')][['col_name_1', 'col_name_2', 'col_name_3']]&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;select&lt;br&gt;
            *&lt;br&gt;
            from table_name&lt;br&gt;
            where col_name_1 = 'value'&lt;br&gt;
            &lt;span class="bold-red"&gt;order by&lt;/span&gt; col_name_2&lt;/td&gt;
            &lt;td&gt;df[df.col_name_1 == 'value'].sort_values('col_name_2')&lt;/td&gt;
        &lt;/tr&gt;
         &lt;tr&gt;
            &lt;td&gt;select&lt;br&gt;
            *&lt;br&gt;
            from table_name&lt;br&gt;
            where col_name_1 = 'value'&lt;br&gt;
            &lt;span class="bold-red"&gt;order by&lt;/span&gt; col_name_2 &lt;span class="bold-red"&gt;desc&lt;/span&gt;&lt;/td&gt;
            &lt;td&gt;df[df.col_name_1 == 'value'].sort_values('col_name_2', ascending=False)&lt;/td&gt;
        &lt;/tr&gt;        
        &lt;tr&gt;
            &lt;td&gt;select&lt;br&gt;
            *&lt;br&gt;
            from table_name&lt;br&gt;
            where col_name &lt;span class="bold-red"&gt;in&lt;/span&gt; ('val_1', 'val_2')&lt;/td&gt;
            &lt;td&gt;df[df.col_name.isin(['val_1', 'val_2'])]&lt;/td&gt;
        &lt;/tr&gt;        
        &lt;tr&gt;
            &lt;td&gt;select&lt;br&gt;
            *&lt;br&gt;
            from table_name&lt;br&gt;
            where col_name &lt;span class="bold-red"&gt;not in&lt;/span&gt; ('val_1', 'val_2')&lt;/td&gt;
            &lt;td&gt;df[~df.col_name.isin(['val_1', 'val_2'])]&lt;/td&gt;
        &lt;/tr&gt;   
        &lt;tr&gt;
            &lt;td&gt;select&lt;br&gt;
            col_name_1, col_name_2, count(&amp;ast;)&lt;br&gt;
            from table_name&lt;br&gt;
            &lt;span class="bold-red"&gt;group by&lt;/span&gt; col_name_1, col_name_2&lt;br&gt;
            &lt;span class="bold-red"&gt;order by&lt;/span&gt; col_name_1, col_name_2&lt;/td&gt;
            &lt;td&gt;df.groupby(['col_name_1', 'col_name_2']).size()&lt;/td&gt;
        &lt;/tr&gt;         
        &lt;tr&gt;
            &lt;td&gt;select&lt;br&gt;
            col_name_1, col_name_2, count(&amp;ast;)&lt;br&gt;
            from table_name&lt;br&gt;
            &lt;span class="bold-red"&gt;group by&lt;/span&gt; col_name_1, col_name_2&lt;br&gt;
            &lt;span class="bold-red"&gt;order by&lt;/span&gt; col_name_1, count(&amp;ast;) desc&lt;/td&gt;
            &lt;td&gt;df.groupby(['col_name_1', 'col_name_2']).size().to_frame('size').reset_index().sort_values(['col_name_1', 'size'], ascending=[True, False])&lt;/td&gt;
        &lt;/tr&gt;      
        &lt;tr&gt;
            &lt;td&gt;select&lt;br&gt;
            col_name_1, count(&amp;ast;)&lt;br&gt;
            from table_name&lt;br&gt;
            where col_name_2 = 'val_1'&lt;br&gt;
            group by col_name_1&lt;br&gt;
            &lt;span class="bold-red"&gt;having&lt;/span&gt; count(&amp;ast;) &gt; 1000&lt;br&gt;
            order by count(&amp;ast;) desc&lt;/td&gt;
            &lt;td&gt;df[df.col_name_2 == 'val_1'].groupby('col_name_1').filter(lambda g: len(g) &gt; 1000).groupby('col_name_1').size().sort_values(ascending=False)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;select&lt;br&gt;
            col_name&lt;br&gt;
            from table_name&lt;br&gt;
            order by size&lt;br&gt;
            &lt;span class="bold-red"&gt;desc limit&lt;/span&gt; 10&lt;/td&gt;
            &lt;td&gt;df.nlargest(10, columns='col_name')&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;select&lt;br&gt;
            col_name&lt;br&gt;
            from table_name&lt;br&gt;
            order by size&lt;br&gt;
            &lt;span class="bold-red"&gt;desc limit&lt;/span&gt; 10
            &lt;span class="bold-red"&gt;offset 10&lt;/span&gt;&lt;/td&gt;
            &lt;td&gt;df.nlargest(&lt;span class="bold-red"&gt;20&lt;/span&gt;, columns='col_name').tail(10)&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;select&lt;br&gt;
            &lt;span class="bold-red"&gt;max&lt;/span&gt;(col_name), &lt;span class="bold-red"&gt;min&lt;/span&gt;(col_name), &lt;span class="bold-red"&gt;mean&lt;/span&gt;(col_name), &lt;span class="bold-red"&gt;median&lt;/span&gt;(col_name)&lt;br&gt;
            from table_name&lt;/td&gt;
            &lt;td&gt;df.agg({'col_name': ['min', 'max', 'mean', 'median']})&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;select&lt;br&gt;
            col_name_1, col_name_2, col_name_3, col_name_4&lt;br&gt;
            from table_name_1&lt;br&gt;
            &lt;span class="bold-red"&gt;join&lt;/span&gt; table_name_2&lt;br&gt;
            on table_name_1.col_name_id_1 = table_name_2.col_name_id_2&lt;br&gt;
            where table_name_2.col_name = 'val'&lt;/td&gt;
            &lt;td&gt;df1.merge(df2[df2.col_name == 'val'][['col_name_id_2']], left_on='col_name_id_1', right_on='col_name_id_2', how='inner')[['col_name_1', 'col_name_2', 'col_name_3', 'col_name_4']]&lt;/td&gt;
        &lt;/tr&gt;        
        &lt;tr&gt;
            &lt;td&gt;
                &lt;span class="bold-red"&gt;create&lt;/span&gt; table table_name (col_name_1 integer, col_name_2 text);&lt;br&gt;
                &lt;span class="bold-red"&gt;insert&lt;/span&gt; into table_name values (1, 'val_1');&lt;br&gt;
                insert into table_name values (2, 'val_2');&lt;br&gt;
                insert into table_name values (3, 'val_3');
            &lt;/td&gt;
            &lt;td&gt;
                df1 = pd.DataFrame({'id': [1, 2], 'name': ['val_1', 'val_2']})&lt;br&gt;
                df2 = pd.DataFrame({'id': [3], 'name': ['val_3']})&lt;br&gt;
                pd.concat([df1, df2]).reset_index(drop=True)
            &lt;/td&gt;
        &lt;/tr&gt;        
        &lt;tr&gt;
            &lt;td&gt;&lt;span class="bold-red"&gt;update&lt;/span&gt;&lt;br&gt;
            table_name&lt;br&gt;
            set col_name_1 = 'val_1'&lt;br&gt;
            where col_name_2 == 'val_2'&lt;/td&gt;
            &lt;td&gt;df.loc[df['col_name_2'] == 'val_2', 'col_name_1'] = 'val_1'&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;&lt;span class="bold-red"&gt;delete&lt;/span&gt;&lt;br&gt;
            from table_name&lt;br&gt;
            where col_name = 'val'&lt;/td&gt;
            &lt;td&gt;
                df = df[df.col_name != 'val'&lt;br&gt;
                df.drop(df[df.col_name == 'val'].index)
            &lt;/td&gt;
        &lt;/tr&gt;
&lt;/table&gt;</content><category term="python"></category><category term="pandas"></category></entry></feed>